<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__d_s3231_8cpp_source" xml:lang="en-US">
<title>DS3231.cpp</title>
<indexterm><primary>lib/DS3231/DS3231.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__d_s3231_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__d_s3231_8h">DS3231.h</link>&quot;</emphasis>
<anchor xml:id="__d_s3231_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
<anchor xml:id="__d_s3231_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
<anchor xml:id="__d_s3231_8cpp_source_1l00004"/>00004 
<anchor xml:id="__d_s3231_8cpp_source_1l00005"/>00005 <emphasis role="keyword">const</emphasis>&#32;std::array&lt;std::string,&#32;7&gt;&#32;<link linkend="_class_d_s3231_1aaecfb4d1dafaed2f892bf579aadbd7a3">DS3231::WEEKDAYS</link>&#32;=&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;SUN&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;MON&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;TUE&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;WED&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;THU&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;FRI&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;SAT&quot;</emphasis>
<anchor xml:id="__d_s3231_8cpp_source_1l00007"/>00007 };
<anchor xml:id="__d_s3231_8cpp_source_1l00008"/>00008 
<anchor xml:id="__d_s3231_8cpp_source_1l00009"/><link linkend="_class_d_s3231_1ad78b99a37b67a9912f39602d8802a358">00009</link> <link linkend="_class_d_s3231_1ad78b99a37b67a9912f39602d8802a358">DS3231::DS3231</link>(i2c_inst_t&#32;*i2c_port,&#32;uint8_t&#32;<link linkend="_class_d_s3231_1a220290093650973f7ba16872e33b8b96">address</link>)&#32;:&#32;<link linkend="_class_d_s3231_1afff19e512928fce8a6f9b50885df3732">i2c</link>(i2c_port),&#32;<link linkend="_class_d_s3231_1a220290093650973f7ba16872e33b8b96">address</link>(<link linkend="_class_d_s3231_1a220290093650973f7ba16872e33b8b96">address</link>)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00010"/>00010 }
<anchor xml:id="__d_s3231_8cpp_source_1l00011"/>00011 
<anchor xml:id="__d_s3231_8cpp_source_1l00012"/><link linkend="_class_d_s3231_1a6ead725bcb29001cfbf4279f249d6983">00012</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_d_s3231_1a6ead725bcb29001cfbf4279f249d6983">DS3231::setTime</link>(uint8_t&#32;sec,&#32;uint8_t&#32;min,&#32;uint8_t&#32;hour,
<anchor xml:id="__d_s3231_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;weekday,&#32;uint8_t&#32;day,&#32;uint8_t&#32;month,&#32;uint16_t&#32;year)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[8];
<anchor xml:id="__d_s3231_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[0]&#32;=&#32;0;
<anchor xml:id="__d_s3231_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[1]&#32;=&#32;<link linkend="_class_d_s3231_1a41f5aabf74e5a66093116999648806ab">bin2bcd</link>(sec);
<anchor xml:id="__d_s3231_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[2]&#32;=&#32;<link linkend="_class_d_s3231_1a41f5aabf74e5a66093116999648806ab">bin2bcd</link>(min);
<anchor xml:id="__d_s3231_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[3]&#32;=&#32;<link linkend="_class_d_s3231_1a41f5aabf74e5a66093116999648806ab">bin2bcd</link>(hour);
<anchor xml:id="__d_s3231_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[4]&#32;=&#32;<link linkend="_class_d_s3231_1a41f5aabf74e5a66093116999648806ab">bin2bcd</link>(weekday);
<anchor xml:id="__d_s3231_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[5]&#32;=&#32;<link linkend="_class_d_s3231_1a41f5aabf74e5a66093116999648806ab">bin2bcd</link>(day);
<anchor xml:id="__d_s3231_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[6]&#32;=&#32;<link linkend="_class_d_s3231_1a41f5aabf74e5a66093116999648806ab">bin2bcd</link>(month);
<anchor xml:id="__d_s3231_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[7]&#32;=&#32;<link linkend="_class_d_s3231_1a41f5aabf74e5a66093116999648806ab">bin2bcd</link>(year&#32;-&#32;2000);
<anchor xml:id="__d_s3231_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;time&#32;to&#32;RTC</emphasis>
<anchor xml:id="__d_s3231_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;uint8_t&#32;reg&#32;=&#32;<link linkend="_class_d_s3231_1af87c9b9232490e63de80b4e4c8aec81f">RTC_REGISTER</link>;
<anchor xml:id="__d_s3231_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;i2c_write_blocking(<link linkend="_class_d_s3231_1afff19e512928fce8a6f9b50885df3732">i2c</link>,&#32;<link linkend="_class_d_s3231_1a220290093650973f7ba16872e33b8b96">address</link>,&#32;&amp;reg,&#32;1,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__d_s3231_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i2c_write_blocking(<link linkend="_class_d_s3231_1afff19e512928fce8a6f9b50885df3732">i2c</link>,&#32;<link linkend="_class_d_s3231_1a220290093650973f7ba16872e33b8b96">address</link>,&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>),&#32;<emphasis role="keyword">false</emphasis>)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>);
<anchor xml:id="__d_s3231_8cpp_source_1l00027"/>00027 }
<anchor xml:id="__d_s3231_8cpp_source_1l00028"/>00028 
<anchor xml:id="__d_s3231_8cpp_source_1l00029"/><link linkend="_class_d_s3231_1aedd5fa550aa8b38fabe4d44d9ba5a0af">00029</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_d_s3231_1aedd5fa550aa8b38fabe4d44d9ba5a0af">DS3231::getTime</link>(uint8_t&amp;&#32;sec,&#32;uint8_t&amp;&#32;min,&#32;uint8_t&amp;&#32;hour,
<anchor xml:id="__d_s3231_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&amp;&#32;weekday,&#32;uint8_t&amp;&#32;day,&#32;uint8_t&amp;&#32;month,&#32;uint16_t&amp;&#32;year)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[7];
<anchor xml:id="__d_s3231_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;uint8_t&#32;reg&#32;=&#32;<link linkend="_class_d_s3231_1af87c9b9232490e63de80b4e4c8aec81f">RTC_REGISTER</link>;
<anchor xml:id="__d_s3231_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i2c_write_blocking(<link linkend="_class_d_s3231_1afff19e512928fce8a6f9b50885df3732">i2c</link>,&#32;<link linkend="_class_d_s3231_1a220290093650973f7ba16872e33b8b96">address</link>,&#32;&amp;reg,&#32;1,&#32;<emphasis role="keyword">true</emphasis>)&#32;!=&#32;1)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_s3231_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_s3231_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i2c_read_blocking(<link linkend="_class_d_s3231_1afff19e512928fce8a6f9b50885df3732">i2c</link>,&#32;<link linkend="_class_d_s3231_1a220290093650973f7ba16872e33b8b96">address</link>,&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>),&#32;<emphasis role="keyword">false</emphasis>)&#32;!=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>))&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__d_s3231_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_s3231_8cpp_source_1l00041"/>00041 
<anchor xml:id="__d_s3231_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;sec&#32;=&#32;<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[0]);
<anchor xml:id="__d_s3231_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;min&#32;=&#32;<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[1]);
<anchor xml:id="__d_s3231_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;hour&#32;=&#32;<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[2]);
<anchor xml:id="__d_s3231_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;weekday&#32;=&#32;<link linkend="_class_d_s3231_1aaecfb4d1dafaed2f892bf579aadbd7a3">WEEKDAYS</link>[<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[3])];
<anchor xml:id="__d_s3231_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;day&#32;=&#32;<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[4]);
<anchor xml:id="__d_s3231_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;month&#32;=&#32;<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[5]);
<anchor xml:id="__d_s3231_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;year&#32;=&#32;<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[6])&#32;+&#32;2000;
<anchor xml:id="__d_s3231_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__d_s3231_8cpp_source_1l00051"/>00051 }
<anchor xml:id="__d_s3231_8cpp_source_1l00052"/>00052 
<anchor xml:id="__d_s3231_8cpp_source_1l00053"/><link linkend="_class_d_s3231_1af7eb8bade221416e4035f1e7139b6154">00053</link> std::string&#32;<link linkend="_class_d_s3231_1af7eb8bade221416e4035f1e7139b6154">DS3231::getTimeString</link>()&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;uint8_t&#32;sec,&#32;min,&#32;hour,&#32;day,&#32;month;
<anchor xml:id="__d_s3231_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;uint16_t&#32;year;
<anchor xml:id="__d_s3231_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;std::string&#32;weekday;
<anchor xml:id="__d_s3231_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_d_s3231_1aedd5fa550aa8b38fabe4d44d9ba5a0af">getTime</link>(sec,&#32;min,&#32;hour,&#32;weekday,&#32;day,&#32;month,&#32;year))&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Error&#32;reading&#32;RTC&quot;</emphasis>;
<anchor xml:id="__d_s3231_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_s3231_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;std::stringstream&#32;ss;
<anchor xml:id="__d_s3231_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;<link linkend="_class_d_s3231_1ada371a466a46dd550e6eded5217627b5">preZero</link>(hour)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_class_d_s3231_1ada371a466a46dd550e6eded5217627b5">preZero</link>(min)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_class_d_s3231_1ada371a466a46dd550e6eded5217627b5">preZero</link>(sec)
<anchor xml:id="__d_s3231_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;weekday&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(day)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(month)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;year;
<anchor xml:id="__d_s3231_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ss.str();
<anchor xml:id="__d_s3231_8cpp_source_1l00070"/>00070 }
<anchor xml:id="__d_s3231_8cpp_source_1l00071"/>00071 
<anchor xml:id="__d_s3231_8cpp_source_1l00072"/><link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">00072</link> uint8_t&#32;<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">DS3231::bcd2bin</link>(uint8_t&#32;val)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((val/16)&#32;*&#32;10)&#32;+&#32;(val&#32;%&#32;16);
<anchor xml:id="__d_s3231_8cpp_source_1l00074"/>00074 }
<anchor xml:id="__d_s3231_8cpp_source_1l00075"/>00075 
<anchor xml:id="__d_s3231_8cpp_source_1l00076"/><link linkend="_class_d_s3231_1a41f5aabf74e5a66093116999648806ab">00076</link> uint8_t&#32;<link linkend="_class_d_s3231_1a41f5aabf74e5a66093116999648806ab">DS3231::bin2bcd</link>(uint8_t&#32;val)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((val/10)&#32;*&#32;16)&#32;+&#32;(val&#32;%&#32;10);
<anchor xml:id="__d_s3231_8cpp_source_1l00078"/>00078 }
<anchor xml:id="__d_s3231_8cpp_source_1l00079"/>00079 
<anchor xml:id="__d_s3231_8cpp_source_1l00080"/><link linkend="_class_d_s3231_1ada371a466a46dd550e6eded5217627b5">00080</link> std::string&#32;<link linkend="_class_d_s3231_1ada371a466a46dd550e6eded5217627b5">DS3231::preZero</link>(uint8_t&#32;val)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val&#32;&lt;&#32;10)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;+&#32;std::to_string(val);
<anchor xml:id="__d_s3231_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_s3231_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::to_string(val);
<anchor xml:id="__d_s3231_8cpp_source_1l00085"/>00085 }
<anchor xml:id="__d_s3231_8cpp_source_1l00086"/>00086 
<anchor xml:id="__d_s3231_8cpp_source_1l00087"/><link linkend="_class_d_s3231_1a569f69050349e21823276ef29ff07a76">00087</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_d_s3231_1a569f69050349e21823276ef29ff07a76">DS3231::setTimeUnix</link>(uint32_t&#32;unixTime)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<link linkend="_struct_date_time">DateTime</link>&#32;dt&#32;=&#32;<link linkend="_class_d_s3231_1a40a965b965496e5b0e7758040c5d9ce7">unixToDateTime</link>(unixTime);
<anchor xml:id="__d_s3231_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;uint8_t&#32;weekdayIndex&#32;=&#32;0;
<anchor xml:id="__d_s3231_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;weekday&#32;(0&#32;=&#32;Sunday,&#32;1&#32;=&#32;Monday,&#32;etc.)</emphasis>
<anchor xml:id="__d_s3231_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;time_t&#32;t&#32;=&#32;unixTime;
<anchor xml:id="__d_s3231_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>tm*&#32;tmp&#32;=&#32;gmtime(&amp;t);
<anchor xml:id="__d_s3231_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;weekdayIndex&#32;=&#32;tmp-&gt;tm_wday;
<anchor xml:id="__d_s3231_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_d_s3231_1a6ead725bcb29001cfbf4279f249d6983">setTime</link>(dt.<link linkend="_struct_date_time_1afb74c1792d0f0f9d3b0d2295554fa39d">second</link>,&#32;dt.<link linkend="_struct_date_time_1abc5bfa47937548c7aaad1970ba759af3">minute</link>,&#32;dt.<link linkend="_struct_date_time_1ad7812eb3752d2309263267d4bc3c79a0">hour</link>,&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weekdayIndex,&#32;dt.<link linkend="_struct_date_time_1a727866b5ecdfda1edf946efe86aa74af">day</link>,&#32;dt.<link linkend="_struct_date_time_1ac895afb51c74941c50205f746b709148">month</link>,&#32;dt.<link linkend="_struct_date_time_1a0a61d60280541502e47f9a7fd6e1c8d2">year</link>);
<anchor xml:id="__d_s3231_8cpp_source_1l00097"/>00097 }
<anchor xml:id="__d_s3231_8cpp_source_1l00098"/>00098 
<anchor xml:id="__d_s3231_8cpp_source_1l00099"/><link linkend="_class_d_s3231_1a93399e0145a53c558e316f6f95a20679">00099</link> uint32_t&#32;<link linkend="_class_d_s3231_1a93399e0145a53c558e316f6f95a20679">DS3231::getTimeUnix</link>()&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<link linkend="_struct_date_time">DateTime</link>&#32;dt&#32;=&#32;<link linkend="_class_d_s3231_1aa19b08f3978eea489bc8af3a84d67e59">getDateTime</link>();
<anchor xml:id="__d_s3231_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_d_s3231_1ae6c4f2144a772c44f7adbace7f86dfa1">dateTimeToUnix</link>(dt);
<anchor xml:id="__d_s3231_8cpp_source_1l00102"/>00102 }
<anchor xml:id="__d_s3231_8cpp_source_1l00103"/>00103 
<anchor xml:id="__d_s3231_8cpp_source_1l00104"/><link linkend="_class_d_s3231_1aa19b08f3978eea489bc8af3a84d67e59">00104</link> <link linkend="_struct_date_time">DateTime</link>&#32;<link linkend="_class_d_s3231_1aa19b08f3978eea489bc8af3a84d67e59">DS3231::getDateTime</link>()&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<link linkend="_struct_date_time">DateTime</link>&#32;dt;
<anchor xml:id="__d_s3231_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[7];
<anchor xml:id="__d_s3231_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;uint8_t&#32;reg&#32;=&#32;<link linkend="_class_d_s3231_1af87c9b9232490e63de80b4e4c8aec81f">RTC_REGISTER</link>;
<anchor xml:id="__d_s3231_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i2c_write_blocking(<link linkend="_class_d_s3231_1afff19e512928fce8a6f9b50885df3732">i2c</link>,&#32;<link linkend="_class_d_s3231_1a220290093650973f7ba16872e33b8b96">address</link>,&#32;&amp;reg,&#32;1,&#32;<emphasis role="keyword">true</emphasis>)&#32;!=&#32;1)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_date_time">DateTime</link>{0};
<anchor xml:id="__d_s3231_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_s3231_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i2c_read_blocking(<link linkend="_class_d_s3231_1afff19e512928fce8a6f9b50885df3732">i2c</link>,&#32;<link linkend="_class_d_s3231_1a220290093650973f7ba16872e33b8b96">address</link>,&#32;<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>),&#32;<emphasis role="keyword">false</emphasis>)&#32;!=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>))&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_date_time">DateTime</link>{0};
<anchor xml:id="__d_s3231_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_s3231_8cpp_source_1l00116"/>00116 
<anchor xml:id="__d_s3231_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1afb74c1792d0f0f9d3b0d2295554fa39d">second</link>&#32;=&#32;<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[0]);
<anchor xml:id="__d_s3231_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1abc5bfa47937548c7aaad1970ba759af3">minute</link>&#32;=&#32;<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[1]);
<anchor xml:id="__d_s3231_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1ad7812eb3752d2309263267d4bc3c79a0">hour</link>&#32;=&#32;<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[2]);
<anchor xml:id="__d_s3231_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1a5b762acddaaa0138a96b05159f2c2e23">weekday</link>&#32;=&#32;<link linkend="_class_d_s3231_1aaecfb4d1dafaed2f892bf579aadbd7a3">WEEKDAYS</link>[<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[3])];
<anchor xml:id="__d_s3231_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1a727866b5ecdfda1edf946efe86aa74af">day</link>&#32;=&#32;<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[4]);
<anchor xml:id="__d_s3231_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1ac895afb51c74941c50205f746b709148">month</link>&#32;=&#32;<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[5]);
<anchor xml:id="__d_s3231_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1a0a61d60280541502e47f9a7fd6e1c8d2">year</link>&#32;=&#32;<link linkend="_class_d_s3231_1a389e756fdd8f645d6025906bbce5abd8">bcd2bin</link>(<link linkend="_main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62">buffer</link>[6])&#32;+&#32;2000;
<anchor xml:id="__d_s3231_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dt;
<anchor xml:id="__d_s3231_8cpp_source_1l00126"/>00126 }
<anchor xml:id="__d_s3231_8cpp_source_1l00127"/>00127 
<anchor xml:id="__d_s3231_8cpp_source_1l00128"/><link linkend="_class_d_s3231_1ac5680bedcb5cd48da26a4c0afcddb830">00128</link> uint64_t&#32;<link linkend="_class_d_s3231_1ac5680bedcb5cd48da26a4c0afcddb830">DS3231::getTimeInteger</link>()&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;<link linkend="_struct_date_time">DateTime</link>&#32;dt&#32;=&#32;<link linkend="_class_d_s3231_1aa19b08f3978eea489bc8af3a84d67e59">getDateTime</link>();
<anchor xml:id="__d_s3231_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint64_t<emphasis role="keyword">&gt;</emphasis>(dt.<link linkend="_struct_date_time_1a0a61d60280541502e47f9a7fd6e1c8d2">year</link>)&#32;*&#32;10000000000ULL&#32;+
<anchor xml:id="__d_s3231_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint64_t<emphasis role="keyword">&gt;</emphasis>(dt.<link linkend="_struct_date_time_1ac895afb51c74941c50205f746b709148">month</link>)&#32;*&#32;100000000ULL&#32;+
<anchor xml:id="__d_s3231_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint64_t<emphasis role="keyword">&gt;</emphasis>(dt.<link linkend="_struct_date_time_1a727866b5ecdfda1edf946efe86aa74af">day</link>)&#32;*&#32;1000000ULL&#32;+
<anchor xml:id="__d_s3231_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint64_t<emphasis role="keyword">&gt;</emphasis>(dt.<link linkend="_struct_date_time_1ad7812eb3752d2309263267d4bc3c79a0">hour</link>)&#32;*&#32;10000ULL&#32;+
<anchor xml:id="__d_s3231_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint64_t<emphasis role="keyword">&gt;</emphasis>(dt.<link linkend="_struct_date_time_1abc5bfa47937548c7aaad1970ba759af3">minute</link>)&#32;*&#32;100ULL&#32;+
<anchor xml:id="__d_s3231_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint64_t<emphasis role="keyword">&gt;</emphasis>(dt.<link linkend="_struct_date_time_1afb74c1792d0f0f9d3b0d2295554fa39d">second</link>);
<anchor xml:id="__d_s3231_8cpp_source_1l00136"/>00136 }
<anchor xml:id="__d_s3231_8cpp_source_1l00137"/>00137 
<anchor xml:id="__d_s3231_8cpp_source_1l00138"/><link linkend="_class_d_s3231_1ae6c4f2144a772c44f7adbace7f86dfa1">00138</link> uint32_t&#32;<link linkend="_class_d_s3231_1ae6c4f2144a772c44f7adbace7f86dfa1">DS3231::dateTimeToUnix</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_date_time">DateTime</link>&amp;&#32;dt)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>tm&#32;timeinfo&#32;=&#32;{};
<anchor xml:id="__d_s3231_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;timeinfo.tm_year&#32;=&#32;dt.<link linkend="_struct_date_time_1a0a61d60280541502e47f9a7fd6e1c8d2">year</link>&#32;-&#32;1900;
<anchor xml:id="__d_s3231_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;timeinfo.tm_mon&#32;=&#32;dt.<link linkend="_struct_date_time_1ac895afb51c74941c50205f746b709148">month</link>&#32;-&#32;1;
<anchor xml:id="__d_s3231_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;timeinfo.tm_mday&#32;=&#32;dt.<link linkend="_struct_date_time_1a727866b5ecdfda1edf946efe86aa74af">day</link>;
<anchor xml:id="__d_s3231_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;timeinfo.tm_hour&#32;=&#32;dt.<link linkend="_struct_date_time_1ad7812eb3752d2309263267d4bc3c79a0">hour</link>;
<anchor xml:id="__d_s3231_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;timeinfo.tm_min&#32;=&#32;dt.<link linkend="_struct_date_time_1abc5bfa47937548c7aaad1970ba759af3">minute</link>;
<anchor xml:id="__d_s3231_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;timeinfo.tm_sec&#32;=&#32;dt.<link linkend="_struct_date_time_1afb74c1792d0f0f9d3b0d2295554fa39d">second</link>;
<anchor xml:id="__d_s3231_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mktime(&amp;timeinfo);
<anchor xml:id="__d_s3231_8cpp_source_1l00147"/>00147 }
<anchor xml:id="__d_s3231_8cpp_source_1l00148"/>00148 
<anchor xml:id="__d_s3231_8cpp_source_1l00149"/><link linkend="_class_d_s3231_1a40a965b965496e5b0e7758040c5d9ce7">00149</link> <link linkend="_struct_date_time">DateTime</link>&#32;<link linkend="_class_d_s3231_1a40a965b965496e5b0e7758040c5d9ce7">DS3231::unixToDateTime</link>(uint32_t&#32;unixTime)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;<link linkend="_struct_date_time">DateTime</link>&#32;dt;
<anchor xml:id="__d_s3231_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;time_t&#32;t&#32;=&#32;unixTime;
<anchor xml:id="__d_s3231_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>tm*&#32;tmp&#32;=&#32;gmtime(&amp;t);
<anchor xml:id="__d_s3231_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1a0a61d60280541502e47f9a7fd6e1c8d2">year</link>&#32;=&#32;tmp-&gt;tm_year&#32;+&#32;1900;
<anchor xml:id="__d_s3231_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1ac895afb51c74941c50205f746b709148">month</link>&#32;=&#32;tmp-&gt;tm_mon&#32;+&#32;1;
<anchor xml:id="__d_s3231_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1a727866b5ecdfda1edf946efe86aa74af">day</link>&#32;=&#32;tmp-&gt;tm_mday;
<anchor xml:id="__d_s3231_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1ad7812eb3752d2309263267d4bc3c79a0">hour</link>&#32;=&#32;tmp-&gt;tm_hour;
<anchor xml:id="__d_s3231_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1abc5bfa47937548c7aaad1970ba759af3">minute</link>&#32;=&#32;tmp-&gt;tm_min;
<anchor xml:id="__d_s3231_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1afb74c1792d0f0f9d3b0d2295554fa39d">second</link>&#32;=&#32;tmp-&gt;tm_sec;
<anchor xml:id="__d_s3231_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;dt.<link linkend="_struct_date_time_1a5b762acddaaa0138a96b05159f2c2e23">weekday</link>&#32;=&#32;<link linkend="_class_d_s3231_1aaecfb4d1dafaed2f892bf579aadbd7a3">WEEKDAYS</link>[tmp-&gt;tm_wday];
<anchor xml:id="__d_s3231_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dt;
<anchor xml:id="__d_s3231_8cpp_source_1l00163"/>00163 }
<anchor xml:id="__d_s3231_8cpp_source_1l00164"/>00164 
<anchor xml:id="__d_s3231_8cpp_source_1l00165"/><link linkend="_class_d_s3231_1ad95e3e60f1d82c37e7c03fac84249bc6">00165</link> uint32_t&#32;<link linkend="_class_d_s3231_1ad95e3e60f1d82c37e7c03fac84249bc6">DS3231::getTimeUnixLocal</link>()&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;uint32_t&#32;utcTime&#32;=&#32;<link linkend="_class_d_s3231_1a93399e0145a53c558e316f6f95a20679">getTimeUnix</link>();
<anchor xml:id="__d_s3231_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;utcTime&#32;+&#32;(<link linkend="_class_d_s3231_1a330fb98438d9762df3d7da7ed2f38d25">timezoneOffset</link>&#32;*&#32;60);&#32;<emphasis role="comment">//&#32;Convert&#32;minutes&#32;to&#32;seconds</emphasis>
<anchor xml:id="__d_s3231_8cpp_source_1l00168"/>00168 }
<anchor xml:id="__d_s3231_8cpp_source_1l00169"/>00169 
<anchor xml:id="__d_s3231_8cpp_source_1l00170"/><link linkend="_class_d_s3231_1a4b893299918613d8fb3521793b848d6d">00170</link> <link linkend="_struct_date_time">DateTime</link>&#32;<link linkend="_class_d_s3231_1a4b893299918613d8fb3521793b848d6d">DS3231::getDateTimeLocal</link>()&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;<link linkend="_struct_date_time">DateTime</link>&#32;utc&#32;=&#32;<link linkend="_class_d_s3231_1aa19b08f3978eea489bc8af3a84d67e59">getDateTime</link>();
<anchor xml:id="__d_s3231_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_d_s3231_1accd8b405f5d30b7b26bb2ca4d84a8fa8">applyTimezone</link>(utc,&#32;<link linkend="_class_d_s3231_1a330fb98438d9762df3d7da7ed2f38d25">timezoneOffset</link>);
<anchor xml:id="__d_s3231_8cpp_source_1l00173"/>00173 }
<anchor xml:id="__d_s3231_8cpp_source_1l00174"/>00174 
<anchor xml:id="__d_s3231_8cpp_source_1l00175"/><link linkend="_class_d_s3231_1accd8b405f5d30b7b26bb2ca4d84a8fa8">00175</link> <link linkend="_struct_date_time">DateTime</link>&#32;<link linkend="_class_d_s3231_1accd8b405f5d30b7b26bb2ca4d84a8fa8">DS3231::applyTimezone</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_date_time">DateTime</link>&amp;&#32;utc,&#32;int16_t&#32;offsetMinutes)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;time_t&#32;t&#32;=&#32;<link linkend="_class_d_s3231_1ae6c4f2144a772c44f7adbace7f86dfa1">dateTimeToUnix</link>(utc)&#32;+&#32;(offsetMinutes&#32;*&#32;60);
<anchor xml:id="__d_s3231_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_d_s3231_1a40a965b965496e5b0e7758040c5d9ce7">unixToDateTime</link>(t);
<anchor xml:id="__d_s3231_8cpp_source_1l00178"/>00178 }
<anchor xml:id="__d_s3231_8cpp_source_1l00179"/>00179 
<anchor xml:id="__d_s3231_8cpp_source_1l00180"/><link linkend="_class_d_s3231_1a8674f4e63775d5d5ea7e597d0f2ab2c9">00180</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_d_s3231_1a8674f4e63775d5d5ea7e597d0f2ab2c9">DS3231::needsSync</link>()&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;uint32_t&#32;now&#32;=&#32;<link linkend="_class_d_s3231_1a93399e0145a53c558e316f6f95a20679">getTimeUnix</link>();
<anchor xml:id="__d_s3231_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;sync&#32;interval&#32;has&#32;passed</emphasis>
<anchor xml:id="__d_s3231_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(now&#32;-&#32;<link linkend="_class_d_s3231_1ab05e9cb92a0de071fc81a3d8e6488b73">lastSyncTime</link>&#32;&gt;=&#32;<link linkend="_class_d_s3231_1a1a30fcf3e2d4b9c4951129ac09c1ce4c">syncInterval</link>)&#32;{
<anchor xml:id="__d_s3231_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__d_s3231_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;}
<anchor xml:id="__d_s3231_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;drift&#32;since&#32;last&#32;sync</emphasis>
<anchor xml:id="__d_s3231_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;driftSeconds&#32;=&#32;(now&#32;-&#32;<link linkend="_class_d_s3231_1ab05e9cb92a0de071fc81a3d8e6488b73">lastSyncTime</link>)&#32;*&#32;(<link linkend="_class_d_s3231_1a1d9b76de3a1a01b5b08464f23481c004">clockDrift</link>&#32;/&#32;1000000.0f);
<anchor xml:id="__d_s3231_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;
<anchor xml:id="__d_s3231_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;drift&#32;is&#32;more&#32;than&#32;1&#32;second,&#32;sync&#32;is&#32;needed</emphasis>
<anchor xml:id="__d_s3231_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::abs(driftSeconds)&#32;&gt;=&#32;1.0f;
<anchor xml:id="__d_s3231_8cpp_source_1l00193"/>00193 }
</programlisting></section>
