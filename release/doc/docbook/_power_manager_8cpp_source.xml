<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__power_manager_8cpp_source" xml:lang="en-US">
<title>PowerManager.cpp</title>
<indexterm><primary>lib/PowerManager/PowerManager.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__power_manager_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__power_manager_8h">PowerManager.h</link>&quot;</emphasis>
<anchor xml:id="__power_manager_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__power_manager_8cpp_source_1l00003"/>00003 
<anchor xml:id="__power_manager_8cpp_source_1l00004"/><link linkend="_class_power_manager_1aa9ea91634936a20fb03d65ff8878867e">00004</link> <link linkend="_class_power_manager_1aa9ea91634936a20fb03d65ff8878867e">PowerManager::PowerManager</link>(i2c_inst_t*&#32;i2c)&#32;
<anchor xml:id="__power_manager_8cpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;:&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>(<link linkend="__i_n_a3221_8h_1a5d97d22d72d02c98567c354e0b7292e3a29c59874691b910ca1b4cf0db639d190">INA3221_ADDR40_GND</link>,&#32;i2c)&#32;{};
<anchor xml:id="__power_manager_8cpp_source_1l00006"/>00006 
<anchor xml:id="__power_manager_8cpp_source_1l00007"/><link linkend="_class_power_manager_1a217939b880543bfff917203a06d45258">00007</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_power_manager_1a217939b880543bfff917203a06d45258">PowerManager::initialize</link>()&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<link linkend="_class_power_manager_1a5cf8825fbe9a81810be2f444dff008f1">initialized</link>&#32;=&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.begin();
<anchor xml:id="__power_manager_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_power_manager_1a5cf8825fbe9a81810be2f444dff008f1">initialized</link>;
<anchor xml:id="__power_manager_8cpp_source_1l00010"/>00010 }
<anchor xml:id="__power_manager_8cpp_source_1l00011"/>00011 
<anchor xml:id="__power_manager_8cpp_source_1l00012"/><link linkend="_class_power_manager_1a885c7374cb22e940ef77c0453da5f622">00012</link> std::string&#32;<link linkend="_class_power_manager_1a885c7374cb22e940ef77c0453da5f622">PowerManager::readIDs</link>()&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_power_manager_1a5cf8825fbe9a81810be2f444dff008f1">initialized</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;noinit&quot;</emphasis>;
<anchor xml:id="__power_manager_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;std::string&#32;MAN&#32;=&#32;<emphasis role="stringliteral">&quot;MAN&#32;&quot;</emphasis>&#32;+&#32;std::to_string(<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.getManufID());
<anchor xml:id="__power_manager_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;std::string&#32;DIE&#32;=&#32;<emphasis role="stringliteral">&quot;DIE&#32;&quot;</emphasis>&#32;+&#32;std::to_string(<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.getDieID());
<anchor xml:id="__power_manager_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MAN&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;&quot;</emphasis>&#32;+&#32;DIE;
<anchor xml:id="__power_manager_8cpp_source_1l00017"/>00017 }
<anchor xml:id="__power_manager_8cpp_source_1l00018"/>00018 
<anchor xml:id="__power_manager_8cpp_source_1l00019"/><link linkend="_class_power_manager_1af0d877a74a39cf29cb94d34088641ff9">00019</link> <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_power_manager_1af0d877a74a39cf29cb94d34088641ff9">PowerManager::getVoltageBattery</link>()&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_power_manager_1a5cf8825fbe9a81810be2f444dff008f1">initialized</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0.0f;
<anchor xml:id="__power_manager_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.getVoltage(<link linkend="__i_n_a3221_8h_1a1e8eddf1a4d7773268dccebc08ea37dfa57c4b6d263813c631c0e16b25fb4a9b8">INA3221_CH1</link>);&#32;
<anchor xml:id="__power_manager_8cpp_source_1l00022"/>00022 }
<anchor xml:id="__power_manager_8cpp_source_1l00023"/>00023 
<anchor xml:id="__power_manager_8cpp_source_1l00024"/><link linkend="_class_power_manager_1ae0e4303ddaba328047fb40d8d925c7dd">00024</link> <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_power_manager_1ae0e4303ddaba328047fb40d8d925c7dd">PowerManager::getVoltage5V</link>()&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_power_manager_1a5cf8825fbe9a81810be2f444dff008f1">initialized</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0.0f;
<anchor xml:id="__power_manager_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.getVoltage(<link linkend="__i_n_a3221_8h_1a1e8eddf1a4d7773268dccebc08ea37dfa6653233d1fbdb16cd3c13a663390cc43">INA3221_CH2</link>);&#32;
<anchor xml:id="__power_manager_8cpp_source_1l00027"/>00027 }
<anchor xml:id="__power_manager_8cpp_source_1l00028"/>00028 
<anchor xml:id="__power_manager_8cpp_source_1l00029"/><link linkend="_class_power_manager_1a3f9587ee81469642a2e595ef3805e801">00029</link> <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_power_manager_1a3f9587ee81469642a2e595ef3805e801">PowerManager::getCurrentChargeUSB</link>()&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_power_manager_1a5cf8825fbe9a81810be2f444dff008f1">initialized</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0.0f;
<anchor xml:id="__power_manager_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.getCurrent_mA(<link linkend="__i_n_a3221_8h_1a1e8eddf1a4d7773268dccebc08ea37dfa57c4b6d263813c631c0e16b25fb4a9b8">INA3221_CH1</link>);&#32;
<anchor xml:id="__power_manager_8cpp_source_1l00032"/>00032 }
<anchor xml:id="__power_manager_8cpp_source_1l00033"/>00033 
<anchor xml:id="__power_manager_8cpp_source_1l00034"/><link linkend="_class_power_manager_1a1ebc18dd508b23614c4c7193fbddd962">00034</link> <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_power_manager_1a1ebc18dd508b23614c4c7193fbddd962">PowerManager::getCurrentDraw</link>()&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_power_manager_1a5cf8825fbe9a81810be2f444dff008f1">initialized</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0.0f;
<anchor xml:id="__power_manager_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.getCurrent_mA(<link linkend="__i_n_a3221_8h_1a1e8eddf1a4d7773268dccebc08ea37dfa6653233d1fbdb16cd3c13a663390cc43">INA3221_CH2</link>);&#32;
<anchor xml:id="__power_manager_8cpp_source_1l00037"/>00037 }
<anchor xml:id="__power_manager_8cpp_source_1l00038"/>00038 
<anchor xml:id="__power_manager_8cpp_source_1l00039"/><link linkend="_class_power_manager_1a097734aac2bcc228d6cf22c00e3acb1a">00039</link> <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_power_manager_1a097734aac2bcc228d6cf22c00e3acb1a">PowerManager::getCurrentChargeSolar</link>()&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_power_manager_1a5cf8825fbe9a81810be2f444dff008f1">initialized</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0.0f;
<anchor xml:id="__power_manager_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.getCurrent_mA(<link linkend="__i_n_a3221_8h_1a1e8eddf1a4d7773268dccebc08ea37dfa4811f2dc226094ec0e19766fb12b5657">INA3221_CH3</link>);&#32;
<anchor xml:id="__power_manager_8cpp_source_1l00042"/>00042 }
<anchor xml:id="__power_manager_8cpp_source_1l00043"/>00043 
<anchor xml:id="__power_manager_8cpp_source_1l00044"/><link linkend="_class_power_manager_1acad2f0f2daff3bd609952530d202c78b">00044</link> <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_power_manager_1acad2f0f2daff3bd609952530d202c78b">PowerManager::getCurrentChargeTotal</link>()&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_power_manager_1a5cf8825fbe9a81810be2f444dff008f1">initialized</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0.0f;
<anchor xml:id="__power_manager_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.getCurrent_mA(<link linkend="__i_n_a3221_8h_1a1e8eddf1a4d7773268dccebc08ea37dfa57c4b6d263813c631c0e16b25fb4a9b8">INA3221_CH1</link>)&#32;+&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.getCurrent_mA(<link linkend="__i_n_a3221_8h_1a1e8eddf1a4d7773268dccebc08ea37dfa4811f2dc226094ec0e19766fb12b5657">INA3221_CH3</link>);
<anchor xml:id="__power_manager_8cpp_source_1l00047"/>00047 }
<anchor xml:id="__power_manager_8cpp_source_1l00048"/>00048 
<anchor xml:id="__power_manager_8cpp_source_1l00049"/><link linkend="_class_power_manager_1ae61a45a190d5293029e17c751f88bcd0">00049</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_power_manager_1ae61a45a190d5293029e17c751f88bcd0">PowerManager::configure</link>(<emphasis role="keyword">const</emphasis>&#32;std::map&lt;std::string,&#32;std::string&gt;&amp;&#32;config)&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_power_manager_1a5cf8825fbe9a81810be2f444dff008f1">initialized</link>)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__power_manager_8cpp_source_1l00051"/>00051 
<anchor xml:id="__power_manager_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(config.find(<emphasis role="stringliteral">&quot;operating_mode&quot;</emphasis>)&#32;!=&#32;config.end())&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(config.at(<emphasis role="stringliteral">&quot;operating_mode&quot;</emphasis>)&#32;==&#32;<emphasis role="stringliteral">&quot;continuous&quot;</emphasis>)&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.setModeContinious();
<anchor xml:id="__power_manager_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__power_manager_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;}
<anchor xml:id="__power_manager_8cpp_source_1l00057"/>00057 
<anchor xml:id="__power_manager_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(config.find(<emphasis role="stringliteral">&quot;averaging_mode&quot;</emphasis>)&#32;!=&#32;config.end())&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;avg_mode&#32;=&#32;std::stoi(config.at(<emphasis role="stringliteral">&quot;averaging_mode&quot;</emphasis>));
<anchor xml:id="__power_manager_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(avg_mode)&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
<anchor xml:id="__power_manager_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.setAveragingMode(<link linkend="__i_n_a3221_8h_1ac7b201fe7943ec52b4c0ff76fedbeac4adac1d016625c65a7a80917b957d20f66">INA3221_REG_CONF_AVG_1</link>);
<anchor xml:id="__power_manager_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__power_manager_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4:
<anchor xml:id="__power_manager_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.setAveragingMode(<link linkend="__i_n_a3221_8h_1ac7b201fe7943ec52b4c0ff76fedbeac4a254263a9a481b85fdb243fe2bdc3d19c">INA3221_REG_CONF_AVG_4</link>);
<anchor xml:id="__power_manager_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__power_manager_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;16:
<anchor xml:id="__power_manager_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.setAveragingMode(<link linkend="__i_n_a3221_8h_1ac7b201fe7943ec52b4c0ff76fedbeac4aedf822a654995d30fc6fe4ae1db374d2">INA3221_REG_CONF_AVG_16</link>);
<anchor xml:id="__power_manager_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__power_manager_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__power_manager_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_power_manager_1a5917758068dfeead4ae68840f5bfb493">ina3221</link>.setAveragingMode(<link linkend="__i_n_a3221_8h_1ac7b201fe7943ec52b4c0ff76fedbeac4aedf822a654995d30fc6fe4ae1db374d2">INA3221_REG_CONF_AVG_16</link>);
<anchor xml:id="__power_manager_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__power_manager_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;}
<anchor xml:id="__power_manager_8cpp_source_1l00074"/>00074 }
<anchor xml:id="__power_manager_8cpp_source_1l00075"/>00075 
<anchor xml:id="__power_manager_8cpp_source_1l00076"/><link linkend="_class_power_manager_1a33ea0aaa75b4654b0ee05250119bf083">00076</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_power_manager_1a33ea0aaa75b4654b0ee05250119bf083">PowerManager::isSolarActive</link>()&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_power_manager_1a5cf8825fbe9a81810be2f444dff008f1">initialized</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__power_manager_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_power_manager_1a097734aac2bcc228d6cf22c00e3acb1a">getCurrentChargeSolar</link>()&#32;&gt;&#32;<link linkend="_class_power_manager_1aeb488c42ec47e1a8de0446717d339cce">SOLAR_CURRENT_THRESHOLD</link>;
<anchor xml:id="__power_manager_8cpp_source_1l00079"/>00079 }
<anchor xml:id="__power_manager_8cpp_source_1l00080"/>00080 
<anchor xml:id="__power_manager_8cpp_source_1l00081"/><link linkend="_class_power_manager_1a0548ae14a668bb06e4cc13e0295ad5c8">00081</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_power_manager_1a0548ae14a668bb06e4cc13e0295ad5c8">PowerManager::isUSBConnected</link>()&#32;{
<anchor xml:id="__power_manager_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_power_manager_1a5cf8825fbe9a81810be2f444dff008f1">initialized</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__power_manager_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_power_manager_1a3f9587ee81469642a2e595ef3805e801">getCurrentChargeUSB</link>()&#32;&gt;&#32;<link linkend="_class_power_manager_1afc4246cc3b434053c59cf2dcccf4bc64">USB_CURRENT_THRESHOLD</link>;
<anchor xml:id="__power_manager_8cpp_source_1l00084"/>00084 }
</programlisting></section>
