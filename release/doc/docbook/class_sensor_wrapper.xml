<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_sensor_wrapper" xml:lang="en-US">
<title>SensorWrapper Class Reference</title>
<indexterm><primary>SensorWrapper</primary></indexterm>
<para>
<computeroutput>#include &lt;ISensor.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_sensor_wrapper_1acbec9bb41e3edd34146eacbf23a807a1">initSensor</link> (<link linkend="__i_sensor_8h_1a213c434cb928c4ca22513e2302632435">SensorType</link> type, i2c_inst_t *i2c=nullptr)</para>

<para>Initializes a given sensor type on the specified I2C bus. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_sensor_wrapper_1aeaa7bbc1f7d31212348fd617392cc8d4">configureSensor</link> (<link linkend="__i_sensor_8h_1a213c434cb928c4ca22513e2302632435">SensorType</link> type, const std::map&lt; std::string, std::string &gt; &amp;config)</para>

<para>Configures an already initialized sensor with supplied settings. </para>
</listitem>
            <listitem><para>float <link linkend="_class_sensor_wrapper_1a1b30eac9a56098470f130754134057b9">readSensorData</link> (<link linkend="__i_sensor_8h_1a213c434cb928c4ca22513e2302632435">SensorType</link> sensorType, <link linkend="__i_sensor_8h_1a21b0301bb3eb76855366980212c8ae5e">SensorDataTypeIdentifier</link> dataType)</para>

<para>Reads a specific data type (e.g., temperature, humidity) from a sensor. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_class_sensor_wrapper">SensorWrapper</link> &amp; <link linkend="_class_sensor_wrapper_1adac086bdfb57168899df56fc431c5f41">getInstance</link> ()</para>

<para>Provides a global instance of <link linkend="_class_sensor_wrapper">SensorWrapper</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_sensor_wrapper_1a1702516a09884caf599fad7761dd04c1">SensorWrapper</link> ()</para>

<para>Default constructor for <link linkend="_class_sensor_wrapper">SensorWrapper</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>std::map&lt; <link linkend="__i_sensor_8h_1a213c434cb928c4ca22513e2302632435">SensorType</link>, <link linkend="_class_i_sensor">ISensor</link> * &gt; <link linkend="_class_sensor_wrapper_1ae06e367395181a74d676c533393b47be">sensors</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="__i_sensor_8h_source_1l00043">43</link> of file <link linkend="__i_sensor_8h_source">ISensor.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_sensor_wrapper_1a1702516a09884caf599fad7761dd04c1"/><section>
    <title>SensorWrapper()</title>
<indexterm><primary>SensorWrapper</primary><secondary>SensorWrapper</secondary></indexterm>
<indexterm><primary>SensorWrapper</primary><secondary>SensorWrapper</secondary></indexterm>
<para><computeroutput>SensorWrapper::SensorWrapper ( )<computeroutput>[private]</computeroutput>, <computeroutput>[default]</computeroutput></computeroutput></para><para>

<para>Default constructor for <link linkend="_class_sensor_wrapper">SensorWrapper</link>. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_sensor_wrapper_1aeaa7bbc1f7d31212348fd617392cc8d4"/><section>
    <title>configureSensor()</title>
<indexterm><primary>configureSensor</primary><secondary>SensorWrapper</secondary></indexterm>
<indexterm><primary>SensorWrapper</primary><secondary>configureSensor</secondary></indexterm>
<para><computeroutput>bool SensorWrapper::configureSensor (<link linkend="__i_sensor_8h_1a213c434cb928c4ca22513e2302632435">SensorType</link> type, const std::map&lt; std::string, std::string &gt; &amp; config)</computeroutput></para><para>

<para>Configures an already initialized sensor with supplied settings. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>type</entry><entry>
<para>The sensor type. </para>
</entry>
                            </row>
                            <row>
<entry>config</entry><entry>
<para>Key-value pairs for sensor configuration. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the sensor was successfully configured, otherwise false. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__i_sensor_8cpp_source_1l00051">51</link> of file <link linkend="__i_sensor_8cpp_source">ISensor.cpp</link>.</para>
</section>
<anchor xml:id="_class_sensor_wrapper_1adac086bdfb57168899df56fc431c5f41"/><section>
    <title>getInstance()</title>
<indexterm><primary>getInstance</primary><secondary>SensorWrapper</secondary></indexterm>
<indexterm><primary>SensorWrapper</primary><secondary>getInstance</secondary></indexterm>
<para><computeroutput><link linkend="_class_sensor_wrapper">SensorWrapper</link> &amp; SensorWrapper::getInstance ( )<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Provides a global instance of <link linkend="_class_sensor_wrapper">SensorWrapper</link>. </para>
</para>

<para><formalpara><title>Returns</title>

<para>A reference to the single <link linkend="_class_sensor_wrapper">SensorWrapper</link> instance. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__i_sensor_8cpp_source_1l00011">11</link> of file <link linkend="__i_sensor_8cpp_source">ISensor.cpp</link>.</para>
</section>
<anchor xml:id="_class_sensor_wrapper_1acbec9bb41e3edd34146eacbf23a807a1"/><section>
    <title>initSensor()</title>
<indexterm><primary>initSensor</primary><secondary>SensorWrapper</secondary></indexterm>
<indexterm><primary>SensorWrapper</primary><secondary>initSensor</secondary></indexterm>
<para><computeroutput>bool SensorWrapper::initSensor (<link linkend="__i_sensor_8h_1a213c434cb928c4ca22513e2302632435">SensorType</link> type, i2c_inst_t * i2c = <computeroutput>nullptr</computeroutput>
)</computeroutput></para><para>

<para>Initializes a given sensor type on the specified I2C bus. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>type</entry><entry>
<para>The sensor type (LIGHT, ENVIRONMENT, etc.). </para>
</entry>
                            </row>
                            <row>
<entry>i2c</entry><entry>
<para>The I2C interface pointer. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if initialization succeeded, otherwise false. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__i_sensor_8cpp_source_1l00027">27</link> of file <link linkend="__i_sensor_8cpp_source">ISensor.cpp</link>.</para>
</section>
<anchor xml:id="_class_sensor_wrapper_1a1b30eac9a56098470f130754134057b9"/><section>
    <title>readSensorData()</title>
<indexterm><primary>readSensorData</primary><secondary>SensorWrapper</secondary></indexterm>
<indexterm><primary>SensorWrapper</primary><secondary>readSensorData</secondary></indexterm>
<para><computeroutput>float SensorWrapper::readSensorData (<link linkend="__i_sensor_8h_1a213c434cb928c4ca22513e2302632435">SensorType</link> sensorType, <link linkend="__i_sensor_8h_1a21b0301bb3eb76855366980212c8ae5e">SensorDataTypeIdentifier</link> dataType)</computeroutput></para><para>

<para>Reads a specific data type (e.g., temperature, humidity) from a sensor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sensorType</entry><entry>
<para>The sensor type. </para>
</entry>
                            </row>
                            <row>
<entry>dataType</entry><entry>
<para>The type of data to read (light level, temperature, etc.). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The requested measurement. Returns 0.0f if sensor not found or uninitialized. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__i_sensor_8cpp_source_1l00066">66</link> of file <link linkend="__i_sensor_8cpp_source">ISensor.cpp</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_sensor_wrapper_1ae06e367395181a74d676c533393b47be"/><section>
    <title>sensors</title>
<indexterm><primary>sensors</primary><secondary>SensorWrapper</secondary></indexterm>
<indexterm><primary>SensorWrapper</primary><secondary>sensors</secondary></indexterm>
<para><computeroutput>std::map&lt;<link linkend="__i_sensor_8h_1a213c434cb928c4ca22513e2302632435">SensorType</link>, <link linkend="_class_i_sensor">ISensor</link>*&gt; SensorWrapper::sensors<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__i_sensor_8h_source_1l00051">51</link> of file <link linkend="__i_sensor_8h_source">ISensor.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
lib/<link linkend="__i_sensor_8h">ISensor.h</link>lib/<link linkend="__i_sensor_8cpp">ISensor.cpp</link></section>
</section>
