<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_communication_8h" xml:lang="en-US">
<title>frame_model/communication.h File Reference</title>
<indexterm><primary>frame_model/communication.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;string&gt;<?linebreak?>#include &lt;vector&gt;<?linebreak?>#include &quot;protocol.h&quot;<?linebreak?>#include &quot;event_manager.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_communication_8h_1a520df448c1dc359f42111ac240081975">initializeRadio</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_communication_8h_1a877f9c1d3485cf1521bc13996d39c1fb">sendMessage</link> (std::string <link linkend="_communication_8cpp_1a13c45747091f32644e83d65348c61232">outgoing</link>)</para>
</listitem>
            <listitem><para>void <link linkend="_communication_8h_1a252a4ea5f222c6879d281cc2f9357b46">sendLargePacket</link> (const uint8_t *data, size_t length)</para>
</listitem>
            <listitem><para>void <link linkend="_communication_8h_1a54817002e33761dc61558b1138749dfb">onReceive</link> (int packetSize)</para>
</listitem>
            <listitem><para>void <link linkend="_communication_8h_1ac5e175a6a1482f700f9aee0b727b924f">handleUartInput</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_communication_8h_1a8b9407b2f579031cf4b705f1ac03ac31">processFrameData</link> (const std::string &amp;data)</para>

<para>Execute the command based on the command key and the parameter. </para>
</listitem>
            <listitem><para>void <link linkend="_communication_8h_1a3ea1f464aef22cd9918b6fe75659c535">handleCommandFrame</link> (const <link linkend="_struct_frame">Frame</link> &amp;frame)</para>
</listitem>
            <listitem><para><link linkend="_struct_frame">Frame</link> <link linkend="_communication_8h_1a1907d400d2c8d8d054ba95bcf43276ea">executeCommand</link> (uint32_t commandKey, const std::string &amp;param, <link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link> operationType)</para>
</listitem>
            <listitem><para>void <link linkend="_communication_8h_1a6005ddd6320bebe2a680fa6b8efff6dd">sendEventRegister</link> ()</para>

<para>Send event register value to the ground station. </para>
</listitem>
            <listitem><para>std::string <link linkend="_communication_8h_1ab53898fb6f45dfc657837a665a070959">encodeFrame</link> (const <link linkend="_struct_frame">Frame</link> &amp;frame)</para>

<para>Encode <link linkend="_struct_frame">Frame</link> instance into a string. </para>
</listitem>
            <listitem><para><link linkend="_struct_frame">Frame</link> <link linkend="_communication_8h_1a8f34bc31494430539db21206f084d39d">decodeFrame</link> (const std::string &amp;data)</para>

<para>Convert a string into a <link linkend="_struct_frame">Frame</link> instance. </para>
</listitem>
            <listitem><para><link linkend="_struct_frame">Frame</link> <link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link> (<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1">ExecutionResult</link> result, uint8_t <link linkend="_event__manager_8h_1ad4291fcb880eb5ecb178b53e32f55741">group</link>, uint8_t command, const std::string &amp;value, const <link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8f">ValueUnit</link> unitType=<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8fa0db45d2a4141101bdfe48e3314cfbca3">ValueUnit::UNDEFINED</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_communication_8h_1a6272bef4a482127bfe7c1b50d723d69d">determineUnit</link> (uint8_t <link linkend="_event__manager_8h_1ad4291fcb880eb5ecb178b53e32f55741">group</link>, uint8_t command)</para>
</listitem>
            <listitem><para>void <link linkend="_communication_8h_1a752e7cc27f52d4ba064e691b3e240ed8">sendFrame</link> (const <link linkend="_struct_frame">Frame</link> &amp;frame)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266"/><section>
    <title>buildFrame()</title>
<indexterm><primary>buildFrame</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>buildFrame</secondary></indexterm>
<para><computeroutput><link linkend="_struct_frame">Frame</link> buildFrame (<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1">ExecutionResult</link> result, uint8_t group, uint8_t command, const std::string &amp; value, const <link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8f">ValueUnit</link> unitType = <computeroutput><link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8fa0db45d2a4141101bdfe48e3314cfbca3">ValueUnit::UNDEFINED</link></computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="_frame_8cpp_source_1l00113">113</link> of file <link linkend="_frame_8cpp_source">frame.cpp</link>.</para>
</section>
<anchor xml:id="_communication_8h_1a8f34bc31494430539db21206f084d39d"/><section>
    <title>decodeFrame()</title>
<indexterm><primary>decodeFrame</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>decodeFrame</secondary></indexterm>
<para><computeroutput><link linkend="_struct_frame">Frame</link> decodeFrame (const std::string &amp; data)</computeroutput></para><para>

<para>Convert a string into a <link linkend="_struct_frame">Frame</link> instance. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>data</entry><entry>
<para><link linkend="_struct_frame">Frame</link> data as a string </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_struct_frame">Frame</link> instance </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_frame_8cpp_source_1l00024">24</link> of file <link linkend="_frame_8cpp_source">frame.cpp</link>.</para>
</section>
<anchor xml:id="_communication_8h_1a6272bef4a482127bfe7c1b50d723d69d"/><section>
    <title>determineUnit()</title>
<indexterm><primary>determineUnit</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>determineUnit</secondary></indexterm>
<para><computeroutput>std::string determineUnit (uint8_t group, uint8_t command)</computeroutput></para></section>
<anchor xml:id="_communication_8h_1ab53898fb6f45dfc657837a665a070959"/><section>
    <title>encodeFrame()</title>
<indexterm><primary>encodeFrame</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>encodeFrame</secondary></indexterm>
<para><computeroutput>std::string encodeFrame (const <link linkend="_struct_frame">Frame</link> &amp; frame)</computeroutput></para><para>

<para>Encode <link linkend="_struct_frame">Frame</link> instance into a string. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>frame</entry><entry>
<para><link linkend="_struct_frame">Frame</link> instance to encode </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_struct_frame">Frame</link> encoded as a string </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_frame_8cpp_source_1l00006">6</link> of file <link linkend="_frame_8cpp_source">frame.cpp</link>.</para>
</section>
<anchor xml:id="_communication_8h_1a1907d400d2c8d8d054ba95bcf43276ea"/><section>
    <title>executeCommand()</title>
<indexterm><primary>executeCommand</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>executeCommand</secondary></indexterm>
<para><computeroutput><link linkend="_struct_frame">Frame</link> executeCommand (uint32_t commandKey, const std::string &amp; param, <link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link> operationType)</computeroutput></para><para>
Definition at line <link linkend="_commands_8cpp_source_1l00037">37</link> of file <link linkend="_commands_8cpp_source">commands.cpp</link>.</para>
</section>
<anchor xml:id="_communication_8h_1a3ea1f464aef22cd9918b6fe75659c535"/><section>
    <title>handleCommandFrame()</title>
<indexterm><primary>handleCommandFrame</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>handleCommandFrame</secondary></indexterm>
<para><computeroutput>void handleCommandFrame (const <link linkend="_struct_frame">Frame</link> &amp; frame)</computeroutput></para></section>
<anchor xml:id="_communication_8h_1ac5e175a6a1482f700f9aee0b727b924f"/><section>
    <title>handleUartInput()</title>
<indexterm><primary>handleUartInput</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>handleUartInput</secondary></indexterm>
<para><computeroutput>void handleUartInput ( )</computeroutput></para><para>
Definition at line <link linkend="_receive_8cpp_source_1l00059">59</link> of file <link linkend="_receive_8cpp_source">receive.cpp</link>.</para>
</section>
<anchor xml:id="_communication_8h_1a520df448c1dc359f42111ac240081975"/><section>
    <title>initializeRadio()</title>
<indexterm><primary>initializeRadio</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>initializeRadio</secondary></indexterm>
<para><computeroutput>bool initializeRadio ( )</computeroutput></para><para>
Definition at line <link linkend="_communication_8cpp_source_1l00010">10</link> of file <link linkend="_communication_8cpp_source">communication.cpp</link>.</para>
</section>
<anchor xml:id="_communication_8h_1a54817002e33761dc61558b1138749dfb"/><section>
    <title>onReceive()</title>
<indexterm><primary>onReceive</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>onReceive</secondary></indexterm>
<para><computeroutput>void onReceive (int packetSize)</computeroutput></para><para>
Definition at line <link linkend="_receive_8cpp_source_1l00003">3</link> of file <link linkend="_receive_8cpp_source">receive.cpp</link>.</para>
</section>
<anchor xml:id="_communication_8h_1a8b9407b2f579031cf4b705f1ac03ac31"/><section>
    <title>processFrameData()</title>
<indexterm><primary>processFrameData</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>processFrameData</secondary></indexterm>
<para><computeroutput>void processFrameData (const std::string &amp; data)</computeroutput></para><para>

<para>Execute the command based on the command key and the parameter. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>data</entry><entry>
<para><link linkend="_struct_frame">Frame</link> data in string format </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_frame_8cpp_source_1l00079">79</link> of file <link linkend="_frame_8cpp_source">frame.cpp</link>.</para>
</section>
<anchor xml:id="_communication_8h_1a6005ddd6320bebe2a680fa6b8efff6dd"/><section>
    <title>sendEventRegister()</title>
<indexterm><primary>sendEventRegister</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>sendEventRegister</secondary></indexterm>
<para><computeroutput>void sendEventRegister ( )</computeroutput></para><para>

<para>Send event register value to the ground station. </para>
</para>

<para><note><title>Note</title>

<para>This function is called in the main loop </para>
</note>
</para>
<para>
Definition at line <link linkend="_frame_8cpp_source_1l00098">98</link> of file <link linkend="_frame_8cpp_source">frame.cpp</link>.</para>
</section>
<anchor xml:id="_communication_8h_1a752e7cc27f52d4ba064e691b3e240ed8"/><section>
    <title>sendFrame()</title>
<indexterm><primary>sendFrame</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>sendFrame</secondary></indexterm>
<para><computeroutput>void sendFrame (const <link linkend="_struct_frame">Frame</link> &amp; frame)</computeroutput></para><para>
Definition at line <link linkend="_send_8cpp_source_1l00025">25</link> of file <link linkend="_send_8cpp_source">send.cpp</link>.</para>
</section>
<anchor xml:id="_communication_8h_1a252a4ea5f222c6879d281cc2f9357b46"/><section>
    <title>sendLargePacket()</title>
<indexterm><primary>sendLargePacket</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>sendLargePacket</secondary></indexterm>
<para><computeroutput>void sendLargePacket (const uint8_t * data, size_t length)</computeroutput></para><para>
Definition at line <link linkend="_send_8cpp_source_1l00031">31</link> of file <link linkend="_send_8cpp_source">send.cpp</link>.</para>
</section>
<anchor xml:id="_communication_8h_1a877f9c1d3485cf1521bc13996d39c1fb"/><section>
    <title>sendMessage()</title>
<indexterm><primary>sendMessage</primary><secondary>communication.h</secondary></indexterm>
<indexterm><primary>communication.h</primary><secondary>sendMessage</secondary></indexterm>
<para><computeroutput>void sendMessage (std::string outgoing)</computeroutput></para></section>
</section>
</section>
