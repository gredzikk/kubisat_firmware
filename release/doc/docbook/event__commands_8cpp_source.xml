<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_event__commands_8cpp_source" xml:lang="en-US">
<title>event_commands.cpp</title>
<indexterm><primary>commands/event_commands.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_event__commands_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_communication_8h">communication.h</link>&quot;</emphasis>
<anchor xml:id="_event__commands_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_event__manager_8h">event_manager.h</link>&quot;</emphasis>
<anchor xml:id="_event__commands_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
<anchor xml:id="_event__commands_8cpp_source_1l00004"/>00004 
<anchor xml:id="_event__commands_8cpp_source_1l00005"/>00005 
<anchor xml:id="_event__commands_8cpp_source_1l00011"/>00011 
<anchor xml:id="_event__commands_8cpp_source_1l00029"/><link linkend="_group___event_commands_1gad921fe7254d7ec43f16a6fb21f5c385a">00029</link> <link linkend="_struct_frame">Frame</link>&#32;<link linkend="_group___event_commands_1gad921fe7254d7ec43f16a6fb21f5c385a">handleGetLastEvents</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;param,&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;operationType)&#32;{
<anchor xml:id="_event__commands_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(operationType&#32;!=&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>)&#32;{
<anchor xml:id="_event__commands_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;5,&#32;1,&#32;<emphasis role="stringliteral">&quot;INVALID&#32;OPERATION&quot;</emphasis>);
<anchor xml:id="_event__commands_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;}
<anchor xml:id="_event__commands_8cpp_source_1l00033"/>00033 
<anchor xml:id="_event__commands_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;count&#32;=&#32;10;&#32;<emphasis role="comment">//&#32;Default&#32;number&#32;of&#32;events&#32;to&#32;return</emphasis>
<anchor xml:id="_event__commands_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!param.empty())&#32;{
<anchor xml:id="_event__commands_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_event__commands_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count&#32;=&#32;std::stoul(param);
<anchor xml:id="_event__commands_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(count&#32;==&#32;0&#32;||&#32;count&#32;&gt;&#32;<link linkend="_event__manager_8h_1acc4dda1aaabc9862fe79fd94e0b722bf">EVENT_BUFFER_SIZE</link>)&#32;{
<anchor xml:id="_event__commands_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;5,&#32;1,&#32;<emphasis role="stringliteral">&quot;INVALID&#32;COUNT&quot;</emphasis>);
<anchor xml:id="_event__commands_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_event__commands_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...)&#32;{
<anchor xml:id="_event__commands_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;5,&#32;1,&#32;<emphasis role="stringliteral">&quot;INVALID&#32;PARAMETER&quot;</emphasis>);
<anchor xml:id="_event__commands_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_event__commands_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;}
<anchor xml:id="_event__commands_8cpp_source_1l00045"/>00045 
<anchor xml:id="_event__commands_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;std::stringstream&#32;ss;
<anchor xml:id="_event__commands_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;std::hex&#32;&lt;&lt;&#32;std::uppercase&#32;&lt;&lt;&#32;std::setfill(<emphasis role="charliteral">&apos;0&apos;</emphasis>);
<anchor xml:id="_event__commands_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;
<anchor xml:id="_event__commands_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;available&#32;=&#32;<link linkend="_event__manager_8cpp_1a2a686792b51ec2b9e1b7bfc9faef92f7">eventManager</link>.getEventCount();
<anchor xml:id="_event__commands_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;toReturn&#32;=&#32;std::min(count,&#32;available);
<anchor xml:id="_event__commands_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;
<anchor xml:id="_event__commands_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Start&#32;from&#32;the&#32;most&#32;recent&#32;event</emphasis>
<anchor xml:id="_event__commands_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;toReturn;&#32;i++)&#32;{
<anchor xml:id="_event__commands_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_event_log">EventLog</link>&amp;&#32;<emphasis role="keyword">event</emphasis>&#32;=&#32;<link linkend="_event__manager_8cpp_1a2a686792b51ec2b9e1b7bfc9faef92f7">eventManager</link>.getEvent(available&#32;-&#32;1&#32;-&#32;i);
<anchor xml:id="_event__commands_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Format:&#32;IIIITTTTTTTTGGEE</emphasis>
<anchor xml:id="_event__commands_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;IIII:&#32;16-bit&#32;ID&#32;(4&#32;hex&#32;chars)</emphasis>
<anchor xml:id="_event__commands_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TTTTTTTT:&#32;32-bit&#32;timestamp&#32;(8&#32;hex&#32;chars)</emphasis>
<anchor xml:id="_event__commands_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;GG:&#32;8-bit&#32;group&#32;(2&#32;hex&#32;chars)</emphasis>
<anchor xml:id="_event__commands_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;EE:&#32;8-bit&#32;event&#32;(2&#32;hex&#32;chars)</emphasis>
<anchor xml:id="_event__commands_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;std::setw(4)&#32;&lt;&lt;&#32;<emphasis role="keyword">event</emphasis>.id
<anchor xml:id="_event__commands_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(8)&#32;&lt;&lt;&#32;<emphasis role="keyword">event</emphasis>.timestamp
<anchor xml:id="_event__commands_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(2)&#32;&lt;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">event</emphasis>.group)
<anchor xml:id="_event__commands_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(2)&#32;&lt;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">event</emphasis>.event);
<anchor xml:id="_event__commands_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;toReturn&#32;-&#32;1)&#32;ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>;
<anchor xml:id="_event__commands_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;}
<anchor xml:id="_event__commands_8cpp_source_1l00066"/>00066 
<anchor xml:id="_event__commands_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;5,&#32;1,&#32;ss.str());
<anchor xml:id="_event__commands_8cpp_source_1l00068"/>00068 }
<anchor xml:id="_event__commands_8cpp_source_1l00069"/>00069 
<anchor xml:id="_event__commands_8cpp_source_1l00070"/>00070 
<anchor xml:id="_event__commands_8cpp_source_1l00082"/><link linkend="_group___event_commands_1ga6f817db327c7b16cf49575635e595004">00082</link> <link linkend="_struct_frame">Frame</link>&#32;<link linkend="_group___event_commands_1ga6f817db327c7b16cf49575635e595004">handleGetEventCount</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;param,&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;operationType)&#32;{
<anchor xml:id="_event__commands_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(operationType&#32;!=&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>&#32;||&#32;!param.empty())&#32;{
<anchor xml:id="_event__commands_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;5,&#32;2,&#32;<emphasis role="stringliteral">&quot;INVALID&#32;REQUEST&quot;</emphasis>);
<anchor xml:id="_event__commands_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;}
<anchor xml:id="_event__commands_8cpp_source_1l00086"/>00086 
<anchor xml:id="_event__commands_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;5,&#32;2,&#32;
<anchor xml:id="_event__commands_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(<link linkend="_event__manager_8cpp_1a2a686792b51ec2b9e1b7bfc9faef92f7">eventManager</link>.getEventCount()));
<anchor xml:id="_event__commands_8cpp_source_1l00089"/>00089 }&#32;<emphasis role="comment">//&#32;end&#32;of&#32;EventCommands&#32;group</emphasis>
</programlisting></section>
