<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_gps__commands_8cpp_source" xml:lang="en-US">
<title>gps_commands.cpp</title>
<indexterm><primary>commands/gps_commands.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_gps__commands_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_communication_8h">communication.h</link>&quot;</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_gps__collector_8h">lib/GPS/gps_collector.h</link>&quot;</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>&#32;<emphasis role="comment">//&#32;Include&#32;for&#32;stringstream</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00004"/>00004 
<anchor xml:id="_gps__commands_8cpp_source_1l00010"/>00010 
<anchor xml:id="_gps__commands_8cpp_source_1l00026"/><link linkend="_group___g_p_s_commands_1gaa4c13d7d324ffb354badf45e9ceffb1c">00026</link> <link linkend="_struct_frame">Frame</link>&#32;<link linkend="_group___g_p_s_commands_1gaa4c13d7d324ffb354badf45e9ceffb1c">handleGPSPowerStatus</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;param,&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;operationType)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(operationType&#32;==&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>&#32;||&#32;operationType&#32;==&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a8c52684db8f49511e9b44471716bf164">OperationType::SET</link>))&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;7,&#32;1,&#32;<emphasis role="stringliteral">&quot;INVALID&#32;OPERATION&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00030"/>00030 
<anchor xml:id="_gps__commands_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(operationType&#32;==&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a8c52684db8f49511e9b44471716bf164">OperationType::SET</link>)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(param.empty())&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;7,&#32;1,&#32;<emphasis role="stringliteral">&quot;PARAM&#32;REQUIRED&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00035"/>00035 
<anchor xml:id="_gps__commands_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;powerStatus&#32;=&#32;std::stoi(param);
<anchor xml:id="_gps__commands_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(powerStatus&#32;!=&#32;0&#32;&amp;&amp;&#32;powerStatus&#32;!=&#32;1)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;7,&#32;1,&#32;<emphasis role="stringliteral">&quot;INVALID&#32;VALUE.&#32;USE&#32;0&#32;OR&#32;1&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gpio_put(<link linkend="_pin__config_8h_1aac8b46194f932ec0656edff3718d3750">GPS_POWER_ENABLE_PIN</link>,&#32;powerStatus);
<anchor xml:id="_gps__commands_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_event_emitter_1a539d733505f9a793439a9cfc4f2af079">EventEmitter::emit</link>(<link linkend="_event__manager_8h_1a87aefa0e7b725125ea1a741c80858aa7a8c578de37278ada488d763ea86c5cf20">EventGroup::GPS</link>,&#32;powerStatus&#32;?&#32;<link linkend="_event__manager_8h_1ac4e11c8779c20adc9210532538cdc463a3d6fc432ff9e2d9b890c591179a4401e">GPSEvent::POWER_ON</link>&#32;:&#32;<link linkend="_event__manager_8h_1ac4e11c8779c20adc9210532538cdc463aa15cea80d926d7282b831d451ba8aee8">GPSEvent::POWER_OFF</link>);
<anchor xml:id="_gps__commands_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;7,&#32;1,&#32;std::to_string(powerStatus));
<anchor xml:id="_gps__commands_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;7,&#32;1,&#32;<emphasis role="stringliteral">&quot;INVALID&#32;PARAMETER&#32;FORMAT&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00048"/>00048 
<anchor xml:id="_gps__commands_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;GET&#32;operation</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!param.empty())&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;7,&#32;1,&#32;<emphasis role="stringliteral">&quot;PARAM&#32;UNNECESSARY&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00053"/>00053 
<anchor xml:id="_gps__commands_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;powerStatus&#32;=&#32;gpio_get(<link linkend="_pin__config_8h_1aac8b46194f932ec0656edff3718d3750">GPS_POWER_ENABLE_PIN</link>);
<anchor xml:id="_gps__commands_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;7,&#32;1,&#32;std::to_string(powerStatus));
<anchor xml:id="_gps__commands_8cpp_source_1l00056"/>00056 }
<anchor xml:id="_gps__commands_8cpp_source_1l00057"/>00057 
<anchor xml:id="_gps__commands_8cpp_source_1l00058"/>00058 
<anchor xml:id="_gps__commands_8cpp_source_1l00074"/><link linkend="_group___g_p_s_commands_1gad12f2e18bdfecbd5b6e8d8a84bb9cd77">00074</link> <link linkend="_struct_frame">Frame</link>&#32;<link linkend="_group___g_p_s_commands_1gad12f2e18bdfecbd5b6e8d8a84bb9cd77">handleEnableGPSTransparentMode</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;param,&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;operationType)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Validate&#32;operation&#32;type</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(operationType&#32;==&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a8c52684db8f49511e9b44471716bf164">OperationType::SET</link>))&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(<emphasis role="stringliteral">&quot;GET&#32;operation&#32;not&#32;allowed&#32;for&#32;EnableGPSTransparentMode&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;7,&#32;2,&#32;<emphasis role="stringliteral">&quot;NOT&#32;ALLOWED&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00080"/>00080 
<anchor xml:id="_gps__commands_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;and&#32;validate&#32;timeout&#32;parameter</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;uint32_t&#32;timeoutMs;
<anchor xml:id="_gps__commands_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;timeoutMs&#32;=&#32;param.empty()&#32;?&#32;60000u&#32;:&#32;std::stoul(param)&#32;*&#32;1000;
<anchor xml:id="_gps__commands_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;7,&#32;2,&#32;<emphasis role="stringliteral">&quot;INVALID&#32;TIMEOUT&#32;FORMAT&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00088"/>00088 
<anchor xml:id="_gps__commands_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Setup&#32;UART&#32;parameters&#32;and&#32;exit&#32;sequence</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;EXIT_SEQUENCE&#32;=&#32;<emphasis role="stringliteral">&quot;##EXIT##&quot;</emphasis>;
<anchor xml:id="_gps__commands_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;std::string&#32;inputBuffer;
<anchor xml:id="_gps__commands_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exitRequested&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_gps__commands_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;uint32_t&#32;originalBaudRate&#32;=&#32;<link linkend="_pin__config_8h_1adf735c02ae01a655dbbfc89683107df1">DEBUG_UART_BAUD_RATE</link>;
<anchor xml:id="_gps__commands_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;uint32_t&#32;gpsBaudRate&#32;=&#32;<link linkend="_pin__config_8h_1aff9a5d52092479f80c68a37d9f47ea0c">GPS_UART_BAUD_RATE</link>;
<anchor xml:id="_gps__commands_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;uint32_t&#32;startTime&#32;=&#32;to_ms_since_boot(get_absolute_time());
<anchor xml:id="_gps__commands_8cpp_source_1l00096"/>00096 
<anchor xml:id="_gps__commands_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Log&#32;start&#32;of&#32;transparent&#32;mode</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<link linkend="_class_event_emitter_1a539d733505f9a793439a9cfc4f2af079">EventEmitter::emit</link>(<link linkend="_event__manager_8h_1a87aefa0e7b725125ea1a741c80858aa7a8c578de37278ada488d763ea86c5cf20">EventGroup::GPS</link>,&#32;<link linkend="_event__manager_8h_1ac4e11c8779c20adc9210532538cdc463aad25373b52902ffec9bef3591da75390">GPSEvent::PASS_THROUGH_START</link>);
<anchor xml:id="_gps__commands_8cpp_source_1l00099"/>00099 
<anchor xml:id="_gps__commands_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;startup&#32;message</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;std::string&#32;message&#32;=&#32;<emphasis role="stringliteral">&quot;Entering&#32;GPS&#32;Serial&#32;Pass-Through&#32;Mode&#32;@&quot;</emphasis>&#32;+&#32;
<anchor xml:id="_gps__commands_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(gpsBaudRate)&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;for&#32;&quot;</emphasis>&#32;+&#32;
<anchor xml:id="_gps__commands_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(timeoutMs/1000)&#32;+&#32;<emphasis role="stringliteral">&quot;s\r\n&quot;</emphasis>&#32;+
<anchor xml:id="_gps__commands_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Send&#32;&quot;</emphasis>&#32;+&#32;EXIT_SEQUENCE&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;to&#32;exit&quot;</emphasis>;
<anchor xml:id="_gps__commands_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(message);
<anchor xml:id="_gps__commands_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;
<anchor xml:id="_gps__commands_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allow&#32;time&#32;for&#32;message&#32;to&#32;be&#32;sent&#32;before&#32;baudrate&#32;change</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;sleep_ms(10);
<anchor xml:id="_gps__commands_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;
<anchor xml:id="_gps__commands_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Switch&#32;to&#32;GPS&#32;baudrate</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;uart_set_baudrate(<link linkend="_pin__config_8h_1a1c9052d1656e86f50326fd275c54ca67">DEBUG_UART_PORT</link>,&#32;gpsBaudRate);
<anchor xml:id="_gps__commands_8cpp_source_1l00112"/>00112 
<anchor xml:id="_gps__commands_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Main&#32;transparent&#32;mode&#32;loop</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!exitRequested)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(uart_is_readable(<link linkend="_pin__config_8h_1a1c9052d1656e86f50326fd275c54ca67">DEBUG_UART_PORT</link>))&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;ch&#32;=&#32;uart_getc(<link linkend="_pin__config_8h_1a1c9052d1656e86f50326fd275c54ca67">DEBUG_UART_PORT</link>);
<anchor xml:id="_gps__commands_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_gps__commands_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputBuffer&#32;+=&#32;ch;
<anchor xml:id="_gps__commands_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inputBuffer.length()&#32;&gt;&#32;EXIT_SEQUENCE.length())&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputBuffer&#32;=&#32;inputBuffer.substr(1);
<anchor xml:id="_gps__commands_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_gps__commands_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inputBuffer&#32;==&#32;EXIT_SEQUENCE)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exitRequested&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_gps__commands_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_gps__commands_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_gps__commands_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inputBuffer&#32;!=&#32;EXIT_SEQUENCE.substr(0,&#32;inputBuffer.length()))&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uart_write_blocking(<link linkend="_pin__config_8h_1a31bae3288bdf1b7a767c494f2b049779">GPS_UART_PORT</link>,&#32;
<anchor xml:id="_gps__commands_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>uint8_t*<emphasis role="keyword">&gt;</emphasis>(&amp;ch),&#32;1);
<anchor xml:id="_gps__commands_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00133"/>00133 
<anchor xml:id="_gps__commands_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(uart_is_readable(<link linkend="_pin__config_8h_1a31bae3288bdf1b7a767c494f2b049779">GPS_UART_PORT</link>))&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;gpsByte&#32;=&#32;uart_getc(<link linkend="_pin__config_8h_1a31bae3288bdf1b7a767c494f2b049779">GPS_UART_PORT</link>);
<anchor xml:id="_gps__commands_8cpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uart_write_blocking(<link linkend="_pin__config_8h_1a1c9052d1656e86f50326fd275c54ca67">DEBUG_UART_PORT</link>,&#32;
<anchor xml:id="_gps__commands_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>uint8_t*<emphasis role="keyword">&gt;</emphasis>(&amp;gpsByte),&#32;1);
<anchor xml:id="_gps__commands_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00139"/>00139 
<anchor xml:id="_gps__commands_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(to_ms_since_boot(get_absolute_time())&#32;-&#32;startTime&#32;&gt;=&#32;timeoutMs)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_gps__commands_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00144"/>00144 
<anchor xml:id="_gps__commands_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;uart_set_baudrate(<link linkend="_pin__config_8h_1a1c9052d1656e86f50326fd275c54ca67">DEBUG_UART_PORT</link>,&#32;originalBaudRate);
<anchor xml:id="_gps__commands_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;
<anchor xml:id="_gps__commands_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;sleep_ms(10);
<anchor xml:id="_gps__commands_8cpp_source_1l00148"/>00148 
<anchor xml:id="_gps__commands_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;<link linkend="_class_event_emitter_1a539d733505f9a793439a9cfc4f2af079">EventEmitter::emit</link>(<link linkend="_event__manager_8h_1a87aefa0e7b725125ea1a741c80858aa7a8c578de37278ada488d763ea86c5cf20">EventGroup::GPS</link>,&#32;<link linkend="_event__manager_8h_1ac4e11c8779c20adc9210532538cdc463a2806fc6062c22a550a6d2039ab209e4c">GPSEvent::PASS_THROUGH_END</link>);
<anchor xml:id="_gps__commands_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;
<anchor xml:id="_gps__commands_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;std::string&#32;exitReason&#32;=&#32;exitRequested&#32;?&#32;<emphasis role="stringliteral">&quot;USER_EXIT&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;TIMEOUT&quot;</emphasis>;
<anchor xml:id="_gps__commands_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;std::string&#32;response&#32;=&#32;<emphasis role="stringliteral">&quot;GPS&#32;UART&#32;BRIDGE&#32;EXIT:&#32;&quot;</emphasis>&#32;+&#32;exitReason;
<anchor xml:id="_gps__commands_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(response);
<anchor xml:id="_gps__commands_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;
<anchor xml:id="_gps__commands_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;7,&#32;2,&#32;response);
<anchor xml:id="_gps__commands_8cpp_source_1l00156"/>00156 }
<anchor xml:id="_gps__commands_8cpp_source_1l00157"/>00157 
<anchor xml:id="_gps__commands_8cpp_source_1l00158"/>00158 
<anchor xml:id="_gps__commands_8cpp_source_1l00171"/><link linkend="_group___g_p_s_commands_1ga71881bd1a0a285e4149db732a3f1b533">00171</link> <link linkend="_struct_frame">Frame</link>&#32;<link linkend="_group___g_p_s_commands_1ga71881bd1a0a285e4149db732a3f1b533">handleGetRMCData</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;param,&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;operationType)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(operationType&#32;!=&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;7,&#32;3,&#32;<emphasis role="stringliteral">&quot;INVALID&#32;OPERATION&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00175"/>00175 
<anchor xml:id="_gps__commands_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!param.empty())&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;7,&#32;3,&#32;<emphasis role="stringliteral">&quot;PARAM&#32;UNNECESSARY&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00179"/>00179 
<anchor xml:id="_gps__commands_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;tokens&#32;=&#32;<link linkend="_gps__collector_8cpp_1af2b979012abe80d338fef98209f87b78">nmea_data</link>.getRmcTokens();
<anchor xml:id="_gps__commands_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tokens.empty())&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;7,&#32;3,&#32;<emphasis role="stringliteral">&quot;NO&#32;RMC&#32;DATA&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00184"/>00184 
<anchor xml:id="_gps__commands_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Join&#32;tokens&#32;with&#32;commas&#32;to&#32;create&#32;the&#32;response</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;std::stringstream&#32;ss;
<anchor xml:id="_gps__commands_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;tokens.size();&#32;++i)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;tokens[i];
<anchor xml:id="_gps__commands_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;tokens.size()&#32;-&#32;1)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_gps__commands_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00193"/>00193 
<anchor xml:id="_gps__commands_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;7,&#32;3,&#32;ss.str());
<anchor xml:id="_gps__commands_8cpp_source_1l00195"/>00195 }
<anchor xml:id="_gps__commands_8cpp_source_1l00196"/>00196 
<anchor xml:id="_gps__commands_8cpp_source_1l00197"/>00197 
<anchor xml:id="_gps__commands_8cpp_source_1l00210"/><link linkend="_group___g_p_s_commands_1gaf1f6c0fb4266518353e088e8781ed143">00210</link> <link linkend="_struct_frame">Frame</link>&#32;<link linkend="_group___g_p_s_commands_1gaf1f6c0fb4266518353e088e8781ed143">handleGetGGAData</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;param,&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;operationType)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(operationType&#32;!=&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;7,&#32;4,&#32;<emphasis role="stringliteral">&quot;INVALID&#32;OPERATION&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00214"/>00214 
<anchor xml:id="_gps__commands_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!param.empty())&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;7,&#32;4,&#32;<emphasis role="stringliteral">&quot;PARAM&#32;UNNECESSARY&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00218"/>00218 
<anchor xml:id="_gps__commands_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;tokens&#32;=&#32;<link linkend="_gps__collector_8cpp_1af2b979012abe80d338fef98209f87b78">nmea_data</link>.getGgaTokens();
<anchor xml:id="_gps__commands_8cpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tokens.empty())&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;7,&#32;4,&#32;<emphasis role="stringliteral">&quot;NO&#32;GGA&#32;DATA&quot;</emphasis>);
<anchor xml:id="_gps__commands_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00223"/>00223 
<anchor xml:id="_gps__commands_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Join&#32;tokens&#32;with&#32;commas&#32;to&#32;create&#32;the&#32;response</emphasis>
<anchor xml:id="_gps__commands_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;std::stringstream&#32;ss;
<anchor xml:id="_gps__commands_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;tokens.size();&#32;++i)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;tokens[i];
<anchor xml:id="_gps__commands_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;tokens.size()&#32;-&#32;1)&#32;{
<anchor xml:id="_gps__commands_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_gps__commands_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gps__commands_8cpp_source_1l00232"/>00232 
<anchor xml:id="_gps__commands_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;7,&#32;4,&#32;ss.str());
<anchor xml:id="_gps__commands_8cpp_source_1l00234"/>00234 }&#32;<emphasis role="comment">//&#32;end&#32;of&#32;GPSCommands&#32;group</emphasis>
</programlisting></section>
