<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_power__commands_8cpp_source" xml:lang="en-US">
<title>power_commands.cpp</title>
<indexterm><primary>commands/power_commands.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_power__commands_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_communication_8h">communication.h</link>&quot;</emphasis>
<anchor xml:id="_power__commands_8cpp_source_1l00002"/>00002 
<anchor xml:id="_power__commands_8cpp_source_1l00003"/>00003 
<anchor xml:id="_power__commands_8cpp_source_1l00009"/>00009 
<anchor xml:id="_power__commands_8cpp_source_1l00021"/><link linkend="_group___power_commands_1gafef922e13071e5fb67da78207a9f22a4">00021</link> <link linkend="_struct_frame">Frame</link>&#32;<link linkend="_group___power_commands_1gafef922e13071e5fb67da78207a9f22a4">handleGetPowerManagerIDs</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;param,&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;operationType)&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!param.empty())&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;0,&#32;<emphasis role="stringliteral">&quot;PARAM&#32;UNECESSARY&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00025"/>00025 
<anchor xml:id="_power__commands_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(operationType&#32;==&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>))&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;0,&#32;<emphasis role="stringliteral">&quot;INVALID&#32;OPERATION&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00029"/>00029 
<anchor xml:id="_power__commands_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<link linkend="_class_power_manager">PowerManager</link>&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>;
<anchor xml:id="_power__commands_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;std::string&#32;powerManagerIDS&#32;=&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>.readIDs();
<anchor xml:id="_power__commands_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;2,&#32;0,&#32;powerManagerIDS);
<anchor xml:id="_power__commands_8cpp_source_1l00033"/>00033 }
<anchor xml:id="_power__commands_8cpp_source_1l00034"/>00034 
<anchor xml:id="_power__commands_8cpp_source_1l00035"/>00035 
<anchor xml:id="_power__commands_8cpp_source_1l00047"/><link linkend="_group___power_commands_1gad301b8c13cafa148a6f3e80e9b0bcf1a">00047</link> <link linkend="_struct_frame">Frame</link>&#32;<link linkend="_group___power_commands_1gad301b8c13cafa148a6f3e80e9b0bcf1a">handleGetVoltageBattery</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;param,&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;operationType)&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!param.empty())&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;2,&#32;<emphasis role="stringliteral">&quot;PARAM&#32;UNNECESSARY&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00051"/>00051 
<anchor xml:id="_power__commands_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(operationType&#32;==&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>))&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(<emphasis role="stringliteral">&quot;SET&#32;operation&#32;not&#32;allowed&#32;for&#32;GetVoltageBattery&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;2,&#32;<emphasis role="stringliteral">&quot;NOT&#32;ALLOWED&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00056"/>00056 
<anchor xml:id="_power__commands_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(<emphasis role="stringliteral">&quot;Getting&#32;battery&#32;voltage&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<link linkend="_class_power_manager">PowerManager</link>&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>;
<anchor xml:id="_power__commands_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;voltage&#32;=&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>.getVoltageBattery();
<anchor xml:id="_power__commands_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;2,&#32;2,&#32;std::to_string(voltage),&#32;<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8fad99987f942ecbf2eea5d50ebf50723e6">ValueUnit::VOLT</link>);
<anchor xml:id="_power__commands_8cpp_source_1l00061"/>00061 }
<anchor xml:id="_power__commands_8cpp_source_1l00062"/>00062 
<anchor xml:id="_power__commands_8cpp_source_1l00063"/>00063 
<anchor xml:id="_power__commands_8cpp_source_1l00075"/><link linkend="_group___power_commands_1ga9f2b608f46080fcdae38a1a8454938b8">00075</link> <link linkend="_struct_frame">Frame</link>&#32;<link linkend="_group___power_commands_1ga9f2b608f46080fcdae38a1a8454938b8">handleGetVoltage5V</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;param,&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;operationType)&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!param.empty())&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;3,&#32;<emphasis role="stringliteral">&quot;PARAM&#32;UNNECESSARY&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00079"/>00079 
<anchor xml:id="_power__commands_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(operationType&#32;==&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>))&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(<emphasis role="stringliteral">&quot;SET&#32;operation&#32;not&#32;allowed&#32;for&#32;GetVoltage5V&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;3,&#32;<emphasis role="stringliteral">&quot;NOT&#32;ALLOWED&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00084"/>00084 
<anchor xml:id="_power__commands_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(<emphasis role="stringliteral">&quot;Getting&#32;5V&#32;voltage&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<link linkend="_class_power_manager">PowerManager</link>&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>;
<anchor xml:id="_power__commands_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;voltage&#32;=&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>.getVoltage5V();
<anchor xml:id="_power__commands_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;2,&#32;3,&#32;std::to_string(voltage),&#32;<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8fad99987f942ecbf2eea5d50ebf50723e6">ValueUnit::VOLT</link>);
<anchor xml:id="_power__commands_8cpp_source_1l00089"/>00089 }
<anchor xml:id="_power__commands_8cpp_source_1l00090"/>00090 
<anchor xml:id="_power__commands_8cpp_source_1l00091"/>00091 
<anchor xml:id="_power__commands_8cpp_source_1l00103"/><link linkend="_group___power_commands_1ga3f38c538065bf67dbec1142fdb866d16">00103</link> <link linkend="_struct_frame">Frame</link>&#32;<link linkend="_group___power_commands_1ga3f38c538065bf67dbec1142fdb866d16">handleGetCurrentChargeUSB</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;param,&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;operationType)&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!param.empty())&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;4,&#32;<emphasis role="stringliteral">&quot;PARAM&#32;UNNECESSARY&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00107"/>00107 
<anchor xml:id="_power__commands_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(operationType&#32;==&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>))&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(<emphasis role="stringliteral">&quot;SET&#32;operation&#32;not&#32;allowed&#32;for&#32;GetCurrentChargeUSB&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;4,&#32;<emphasis role="stringliteral">&quot;NOT&#32;ALLOWED&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00112"/>00112 
<anchor xml:id="_power__commands_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(<emphasis role="stringliteral">&quot;Getting&#32;USB&#32;charge&#32;current&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<link linkend="_class_power_manager">PowerManager</link>&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>;
<anchor xml:id="_power__commands_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;chargeCurrent&#32;=&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>.getCurrentChargeUSB();
<anchor xml:id="_power__commands_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;2,&#32;4,&#32;std::to_string(chargeCurrent),&#32;<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8fa1ec9056b2106b66cd5b255ad67fcb671">ValueUnit::MILIAMP</link>);
<anchor xml:id="_power__commands_8cpp_source_1l00117"/>00117 }
<anchor xml:id="_power__commands_8cpp_source_1l00118"/>00118 
<anchor xml:id="_power__commands_8cpp_source_1l00119"/>00119 
<anchor xml:id="_power__commands_8cpp_source_1l00131"/><link linkend="_group___power_commands_1ga6fbaf484e68c9561ad7fabef21def37b">00131</link> <link linkend="_struct_frame">Frame</link>&#32;<link linkend="_group___power_commands_1ga6fbaf484e68c9561ad7fabef21def37b">handleGetCurrentChargeSolar</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;param,&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;operationType)&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!param.empty())&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;5,&#32;<emphasis role="stringliteral">&quot;PARAM&#32;UNNECESSARY&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00135"/>00135 
<anchor xml:id="_power__commands_8cpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(operationType&#32;==&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>))&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(<emphasis role="stringliteral">&quot;SET&#32;operation&#32;not&#32;allowed&#32;for&#32;GetCurrentChargeSolar&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;5,&#32;<emphasis role="stringliteral">&quot;NOT&#32;ALLOWED&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00140"/>00140 
<anchor xml:id="_power__commands_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(<emphasis role="stringliteral">&quot;Getting&#32;solar&#32;charge&#32;current&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<link linkend="_class_power_manager">PowerManager</link>&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>;
<anchor xml:id="_power__commands_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;chargeCurrent&#32;=&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>.getCurrentChargeSolar();
<anchor xml:id="_power__commands_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;2,&#32;5,&#32;std::to_string(chargeCurrent),&#32;<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8fa1ec9056b2106b66cd5b255ad67fcb671">ValueUnit::MILIAMP</link>);
<anchor xml:id="_power__commands_8cpp_source_1l00145"/>00145 }
<anchor xml:id="_power__commands_8cpp_source_1l00146"/>00146 
<anchor xml:id="_power__commands_8cpp_source_1l00147"/>00147 
<anchor xml:id="_power__commands_8cpp_source_1l00159"/><link linkend="_group___power_commands_1ga83596ea837df6cf7b15e673b95bf524f">00159</link> <link linkend="_struct_frame">Frame</link>&#32;<link linkend="_group___power_commands_1ga83596ea837df6cf7b15e673b95bf524f">handleGetCurrentChargeTotal</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;param,&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;operationType)&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!param.empty())&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;6,&#32;<emphasis role="stringliteral">&quot;PARAM&#32;UNNECESSARY&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00163"/>00163 
<anchor xml:id="_power__commands_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(operationType&#32;==&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>))&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(<emphasis role="stringliteral">&quot;SET&#32;operation&#32;not&#32;allowed&#32;for&#32;GetCurrentChargeTotal&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;6,&#32;<emphasis role="stringliteral">&quot;NOT&#32;ALLOWED&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00168"/>00168 
<anchor xml:id="_power__commands_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(<emphasis role="stringliteral">&quot;Getting&#32;total&#32;charge&#32;current&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<link linkend="_class_power_manager">PowerManager</link>&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>;
<anchor xml:id="_power__commands_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;chargeCurrent&#32;=&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>.getCurrentChargeTotal();
<anchor xml:id="_power__commands_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;2,&#32;6,&#32;std::to_string(chargeCurrent),&#32;<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8fa1ec9056b2106b66cd5b255ad67fcb671">ValueUnit::MILIAMP</link>);
<anchor xml:id="_power__commands_8cpp_source_1l00173"/>00173 }
<anchor xml:id="_power__commands_8cpp_source_1l00174"/>00174 
<anchor xml:id="_power__commands_8cpp_source_1l00175"/>00175 
<anchor xml:id="_power__commands_8cpp_source_1l00187"/><link linkend="_group___power_commands_1gabd6610f557fe9deaa9f80d9405738226">00187</link> <link linkend="_struct_frame">Frame</link>&#32;<link linkend="_group___power_commands_1gabd6610f557fe9deaa9f80d9405738226">handleGetCurrentDraw</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;param,&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;operationType)&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!param.empty())&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;7,&#32;<emphasis role="stringliteral">&quot;PARAM&#32;UNNECESSARY&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00191"/>00191 
<anchor xml:id="_power__commands_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(operationType&#32;==&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>))&#32;{
<anchor xml:id="_power__commands_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(<emphasis role="stringliteral">&quot;SET&#32;operation&#32;not&#32;allowed&#32;for&#32;GetCurrentDraw&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5">ExecutionResult::ERROR</link>,&#32;2,&#32;7,&#32;<emphasis role="stringliteral">&quot;NOT&#32;ALLOWED&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;}
<anchor xml:id="_power__commands_8cpp_source_1l00196"/>00196 
<anchor xml:id="_power__commands_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;<link linkend="_utils_8cpp_1aacbcecbe6b5428e3571b06ab2104e706">uartPrint</link>(<emphasis role="stringliteral">&quot;Getting&#32;current&#32;draw&quot;</emphasis>);
<anchor xml:id="_power__commands_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<link linkend="_class_power_manager">PowerManager</link>&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>;
<anchor xml:id="_power__commands_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;currentDraw&#32;=&#32;<link linkend="_main_8cpp_1af8335a606a184154d5e0860517b1e2f8">powerManager</link>.getCurrentDraw();
<anchor xml:id="_power__commands_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_communication_8h_1a54afeb73435419551a1b51a3fd5c3266">buildFrame</link>(<link linkend="_protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c">ExecutionResult::SUCCESS</link>,&#32;2,&#32;7,&#32;std::to_string(currentDraw),&#32;<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8fa1ec9056b2106b66cd5b255ad67fcb671">ValueUnit::MILIAMP</link>);
<anchor xml:id="_power__commands_8cpp_source_1l00201"/>00201 }&#32;<emphasis role="comment">//&#32;end&#32;of&#32;PowerCommands&#32;group</emphasis>
</programlisting></section>
