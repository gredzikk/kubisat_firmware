<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_utils__converters_8cpp_source" xml:lang="en-US">
<title>utils_converters.cpp</title>
<indexterm><primary>frame_model/utils_converters.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_utils__converters_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_communication_8h">communication.h</link>&quot;</emphasis>
<anchor xml:id="_utils__converters_8cpp_source_1l00002"/>00002 
<anchor xml:id="_utils__converters_8cpp_source_1l00003"/><link linkend="_protocol_8h_1a46ff7e9bd427919630557811f44f5473">00003</link> std::string&#32;<link linkend="_utils__converters_8cpp_1a46ff7e9bd427919630557811f44f5473">exceptionTypeToString</link>(<link linkend="_protocol_8h_1a0e0f0f1661d7aeb71ed9698bff6c6383">ExceptionType</link>&#32;type)&#32;{
<anchor xml:id="_utils__converters_8cpp_source_1l00004"/>00004 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(type)&#32;{
<anchor xml:id="_utils__converters_8cpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a0e0f0f1661d7aeb71ed9698bff6c6383a4596302bc1e8ce6e62188e769aac94cf">ExceptionType::NOT_ALLOWED</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;NOT&#32;ALLOWED&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a0e0f0f1661d7aeb71ed9698bff6c6383a4a775a051faafd7eed30f5a95548729a">ExceptionType::INVALID_PARAM</link>:&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;INVALID&#32;PARAM&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a0e0f0f1661d7aeb71ed9698bff6c6383ade918d7abaea4c856c3c64720f3cbb7c">ExceptionType::INVALID_OPERATION</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;INVALID&#32;OPERATION&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a0e0f0f1661d7aeb71ed9698bff6c6383a62c989cb54431f5fa2a775b0ca55bb49">ExceptionType::PARAM_UNECESSARY</link>:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;PARAM&#32;UNECESSARY&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a0e0f0f1661d7aeb71ed9698bff6c6383ab50339a10e1de285ac99d4c3990b8693">ExceptionType::NONE</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;NONE&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;UNKNOWN&#32;EXCEPTION&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;}
<anchor xml:id="_utils__converters_8cpp_source_1l00012"/>00012 }
<anchor xml:id="_utils__converters_8cpp_source_1l00013"/>00013 
<anchor xml:id="_utils__converters_8cpp_source_1l00014"/><link linkend="_protocol_8h_1ab4cb9e6b491bd7711c69c9167a2b9286">00014</link> std::string&#32;<link linkend="_utils__converters_8cpp_1ab4cb9e6b491bd7711c69c9167a2b9286">valueUnitTypeToString</link>(<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8f">ValueUnit</link>&#32;unit)&#32;{
<anchor xml:id="_utils__converters_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(unit)&#32;{
<anchor xml:id="_utils__converters_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8fa0db45d2a4141101bdfe48e3314cfbca3">ValueUnit::UNDEFINED</link>:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8fa2200becb80f0019c4a2ccecec350d0db">ValueUnit::SECOND</link>:&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;s&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8fad99987f942ecbf2eea5d50ebf50723e6">ValueUnit::VOLT</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;V&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8faa97b2c144243b2b9d2c593ec268b62f5">ValueUnit::BOOL</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8faa3eb957bd02f4780a599d5ec4464ca46">ValueUnit::DATETIME</link>:&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8fa61a96ffcb251bb9bf0abf8fec19d0ea8">ValueUnit::TEXT</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a2d96449e2b52d45b5726af92084e0d8fa1ec9056b2106b66cd5b255ad67fcb671">ValueUnit::MILIAMP</link>:&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;mA&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;}
<anchor xml:id="_utils__converters_8cpp_source_1l00025"/>00025 }
<anchor xml:id="_utils__converters_8cpp_source_1l00026"/>00026 
<anchor xml:id="_utils__converters_8cpp_source_1l00027"/>00027 <emphasis role="comment">//&#32;Function&#32;to&#32;convert&#32;OperationType&#32;to&#32;string</emphasis>
<anchor xml:id="_utils__converters_8cpp_source_1l00028"/><link linkend="_protocol_8h_1a82a11ce999902359454fa904a13ae297">00028</link> std::string&#32;<link linkend="_utils__converters_8cpp_1a82a11ce999902359454fa904a13ae297">operationTypeToString</link>(<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;type)&#32;{
<anchor xml:id="_utils__converters_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(type)&#32;{
<anchor xml:id="_utils__converters_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;GET&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a8c52684db8f49511e9b44471716bf164">OperationType::SET</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;SET&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a4e062fc2814c180a9e08b1d204ab31bd">OperationType::ANS</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;ANS&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047acd22bad976363fdd1bfbf6759fede482">OperationType::ERR</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;ERR&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a9517fd0bf8faa655990a4dffe358e13e">OperationType::INF</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;INF&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;UNKNOWN&quot;</emphasis>;
<anchor xml:id="_utils__converters_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;}
<anchor xml:id="_utils__converters_8cpp_source_1l00037"/>00037 }
<anchor xml:id="_utils__converters_8cpp_source_1l00038"/>00038 
<anchor xml:id="_utils__converters_8cpp_source_1l00039"/>00039 <emphasis role="comment">//&#32;Function&#32;to&#32;convert&#32;string&#32;to&#32;OperationType</emphasis>
<anchor xml:id="_utils__converters_8cpp_source_1l00040"/><link linkend="_protocol_8h_1a245c34d9f7072236b66e9352a9d3466e">00040</link> <link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047">OperationType</link>&#32;<link linkend="_utils__converters_8cpp_1a245c34d9f7072236b66e9352a9d3466e">stringToOperationType</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;str)&#32;{
<anchor xml:id="_utils__converters_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str&#32;==&#32;<emphasis role="stringliteral">&quot;GET&quot;</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>;
<anchor xml:id="_utils__converters_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str&#32;==&#32;<emphasis role="stringliteral">&quot;SET&quot;</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a8c52684db8f49511e9b44471716bf164">OperationType::SET</link>;
<anchor xml:id="_utils__converters_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str&#32;==&#32;<emphasis role="stringliteral">&quot;ANS&quot;</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a4e062fc2814c180a9e08b1d204ab31bd">OperationType::ANS</link>;
<anchor xml:id="_utils__converters_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str&#32;==&#32;<emphasis role="stringliteral">&quot;ERR&quot;</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047acd22bad976363fdd1bfbf6759fede482">OperationType::ERR</link>;
<anchor xml:id="_utils__converters_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str&#32;==&#32;<emphasis role="stringliteral">&quot;INF&quot;</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a9517fd0bf8faa655990a4dffe358e13e">OperationType::INF</link>;
<anchor xml:id="_utils__converters_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8">OperationType::GET</link>;&#32;<emphasis role="comment">//&#32;Default&#32;to&#32;GET</emphasis>
<anchor xml:id="_utils__converters_8cpp_source_1l00047"/>00047 }
<anchor xml:id="_utils__converters_8cpp_source_1l00048"/>00048 
<anchor xml:id="_utils__converters_8cpp_source_1l00052"/><link linkend="_protocol_8h_1a4d6495102457200a5632a3286331d238">00052</link> std::vector&lt;uint8_t&gt;&#32;<link linkend="_utils__converters_8cpp_1a4d6495102457200a5632a3286331d238">hexStringToBytes</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;hexString)&#32;{
<anchor xml:id="_utils__converters_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;std::vector&lt;uint8_t&gt;&#32;bytes;
<anchor xml:id="_utils__converters_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;hexString.length();&#32;i&#32;+=&#32;2)&#32;{
<anchor xml:id="_utils__converters_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;byteString&#32;=&#32;hexString.substr(i,&#32;2);
<anchor xml:id="_utils__converters_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;byte;
<anchor xml:id="_utils__converters_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::stringstream&#32;ss;
<anchor xml:id="_utils__converters_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;std::hex&#32;&lt;&lt;&#32;byteString;
<anchor xml:id="_utils__converters_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&gt;&gt;&#32;byte;
<anchor xml:id="_utils__converters_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bytes.push_back(<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keywordtype">byte</emphasis>));
<anchor xml:id="_utils__converters_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;}
<anchor xml:id="_utils__converters_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bytes;
<anchor xml:id="_utils__converters_8cpp_source_1l00063"/>00063 }
</programlisting></section>
