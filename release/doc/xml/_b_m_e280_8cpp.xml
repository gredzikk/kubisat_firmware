<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_b_m_e280_8cpp" kind="file" language="C++">
    <compoundname>BME280.cpp</compoundname>
    <includes refid="_b_m_e280_8h" local="yes">BME280.h</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includes local="yes">hardware/i2c.h</includes>
    <includes local="yes">pico/binary_info.h</includes>
    <includes local="yes">pico/stdlib.h</includes>
    <incdepgraph>
      <node id="1">
        <label>lib/BME280/BME280.cpp</label>
        <link refid="_b_m_e280_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>BME280.h</label>
        <link refid="_b_m_e280_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="5">
        <label>hardware/i2c.h</label>
      </node>
      <node id="6">
        <label>iomanip</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="9">
        <label>pico/binary_info.h</label>
      </node>
      <node id="10">
        <label>pico/stdlib.h</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>BME280.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_b_m_e280_8h" kindref="compound">BME280.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hardware/i2c.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pico/binary_info.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pico/stdlib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BME280<sp/>(BME280)<sp/>Class<sp/>Implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="class_b_m_e280_1a2f0c3415c853ed9303529b75d5d7236b" refkind="member"><highlight class="normal"><ref refid="class_b_m_e280_1a2f0c3415c853ed9303529b75d5d7236b" kindref="member">BME280::BME280</ref>(i2c_inst_t*<sp/>i2cPort,<sp/>uint8_t<sp/>address)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>(i2cPort),<sp/><ref refid="class_b_m_e280_1ae8a52ae32e8cefd398dedf8913737626" kindref="member">device_addr</ref>(address),<sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>{},<sp/><ref refid="class_b_m_e280_1a34b991139b081ff5ebe7943383ac9a97" kindref="member">initialized</ref>(false),<sp/><ref refid="class_b_m_e280_1ad20f44914b78395f4d4bc64f4a68b369" kindref="member">t_fine</ref>(0)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="class_b_m_e280_1a549f7c534b3c0168148188bca5c30e7b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_b_m_e280_1a549f7c534b3c0168148188bca5c30e7b" kindref="member">BME280::init</ref>()<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>I2C<sp/>port.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>device<sp/>ID<sp/>to<sp/>confirm<sp/>it&apos;s<sp/>a<sp/>BME280</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reg<sp/>=<sp/>0xD0;<sp/></highlight><highlight class="comment">//<sp/>Chip<sp/>ID<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>chip_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>i2c_write_blocking(<ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>,<sp/><ref refid="class_b_m_e280_1ae8a52ae32e8cefd398dedf8913737626" kindref="member">device_addr</ref>,<sp/>&amp;reg,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>to<sp/>BME280.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>i2c_read_blocking(<ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>,<sp/><ref refid="class_b_m_e280_1ae8a52ae32e8cefd398dedf8913737626" kindref="member">device_addr</ref>,<sp/>&amp;chip_id,<sp/>1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>chip<sp/>ID<sp/>from<sp/>BME280.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chip_id<sp/>!=<sp/>0x60)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>is<sp/>not<sp/>a<sp/>BME280.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_b_m_e280_1aba168dd8fb74f3b101922c50e60542cb" kindref="member">configure_sensor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>BME280<sp/>sensor.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>calibration<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_b_m_e280_1a9bdaf8aa0c2a67ab6fd0b611c69753e6" kindref="member">get_calibration_parameters</ref>())<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>retrieve<sp/>calibration<sp/>parameters.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1a34b991139b081ff5ebe7943383ac9a97" kindref="member">initialized</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BME280<sp/>sensor<sp/>initialized<sp/>successfully.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="class_b_m_e280_1a9a95fc3d574a66657c1ad050e697545c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_b_m_e280_1a9a95fc3d574a66657c1ad050e697545c" kindref="member">BME280::reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>buf[2]<sp/>=<sp/>{<sp/><ref refid="class_b_m_e280_1ae19b16edfdfce1d75578eabb9d42188f" kindref="member">REG_RESET</ref>,<sp/>0xB6<sp/>};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>i2c_write_blocking(<ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>,<sp/><ref refid="class_b_m_e280_1ae8a52ae32e8cefd398dedf8913737626" kindref="member">device_addr</ref>,<sp/>buf,<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>reset<sp/>BME280<sp/>sensor.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>sleep_ms(10);<sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>reset<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="class_b_m_e280_1af22a2c195c0dfb39f457049ffb7e8f09" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_b_m_e280_1af22a2c195c0dfb39f457049ffb7e8f09" kindref="member">BME280::read_raw_all</ref>(int32_t*<sp/>temperature,<sp/>int32_t*<sp/>pressure,<sp/>int32_t*<sp/>humidity)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_b_m_e280_1a34b991139b081ff5ebe7943383ac9a97" kindref="member">initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BME280<sp/>not<sp/>initialized.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>starting<sp/>register<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>start_reg<sp/>=<sp/><ref refid="class_b_m_e280_1a2e17033617efa62019561b3152ccfd5e" kindref="member">REG_PRESSURE_MSB</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>bytes<sp/>to<sp/>read:<sp/>3<sp/>(pressure)<sp/>+<sp/>3<sp/>(temperature)<sp/>+<sp/>2<sp/>(humidity)<sp/>=<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>buf[8]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>the<sp/>starting<sp/>register<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>i2c_write_blocking(<ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>,<sp/><ref refid="class_b_m_e280_1ae8a52ae32e8cefd398dedf8913737626" kindref="member">device_addr</ref>,<sp/>&amp;start_reg,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>starting<sp/>register<sp/>address<sp/>to<sp/>BME280.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>i2c_read_blocking(<ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>,<sp/><ref refid="class_b_m_e280_1ae8a52ae32e8cefd398dedf8913737626" kindref="member">device_addr</ref>,<sp/>buf,<sp/>8,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>data<sp/>from<sp/>BME280.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Combine<sp/>bytes<sp/>to<sp/>form<sp/>raw<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>*pressure<sp/>=<sp/>((int32_t)buf[0]<sp/>&lt;&lt;<sp/>12)<sp/>|<sp/>((int32_t)buf[1]<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>((int32_t)(buf[2]<sp/>&gt;&gt;<sp/>4));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>*temperature<sp/>=<sp/>((int32_t)buf[3]<sp/>&lt;&lt;<sp/>12)<sp/>|<sp/>((int32_t)buf[4]<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>((int32_t)(buf[5]<sp/>&gt;&gt;<sp/>4));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>*humidity<sp/>=<sp/>((int32_t)buf[6]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(int32_t)buf[7];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="class_b_m_e280_1a77faa64e2670bedae42db2aff8bce837" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_b_m_e280_1a77faa64e2670bedae42db2aff8bce837" kindref="member">BME280::convert_temperature</ref>(int32_t<sp/>temp_raw)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>var1,<sp/>var2;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>var1<sp/>=<sp/>((((temp_raw<sp/>&gt;&gt;<sp/>3)<sp/>-<sp/>((int32_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_t1<sp/>&lt;&lt;<sp/>1)))<sp/>*<sp/>((int32_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_t2))<sp/>&gt;&gt;<sp/>11;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>var2<sp/>=<sp/>(((((temp_raw<sp/>&gt;&gt;<sp/>4)<sp/>-<sp/>((int32_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_t1))<sp/>*<sp/>((temp_raw<sp/>&gt;&gt;<sp/>4)<sp/>-<sp/>((int32_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_t1)))<sp/>&gt;&gt;<sp/>12)<sp/>*<sp/>((int32_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_t3))<sp/>&gt;&gt;<sp/>14;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ad20f44914b78395f4d4bc64f4a68b369" kindref="member">t_fine</ref><sp/>=<sp/>var1<sp/>+<sp/>var2;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>(<ref refid="class_b_m_e280_1ad20f44914b78395f4d4bc64f4a68b369" kindref="member">t_fine</ref><sp/>*<sp/>5<sp/>+<sp/>128)<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T<sp/>/<sp/>100.0f;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="class_b_m_e280_1a132f9daccc10c1b3f973c8740f064f4f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_b_m_e280_1a132f9daccc10c1b3f973c8740f064f4f" kindref="member">BME280::convert_pressure</ref>(int32_t<sp/>pressure_raw)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>var1,<sp/>var2,<sp/>p;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>var1<sp/>=<sp/>((int64_t)<ref refid="class_b_m_e280_1ad20f44914b78395f4d4bc64f4a68b369" kindref="member">t_fine</ref>)<sp/>-<sp/>128000;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>var2<sp/>=<sp/>var1<sp/>*<sp/>var1<sp/>*<sp/>(int64_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p6;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>var2<sp/>=<sp/>var2<sp/>+<sp/>((var1<sp/>*<sp/>(int64_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p5)<sp/>&lt;&lt;<sp/>17);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>var2<sp/>=<sp/>var2<sp/>+<sp/>(((int64_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p4)<sp/>&lt;&lt;<sp/>35);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>var1<sp/>=<sp/>((var1<sp/>*<sp/>var1<sp/>*<sp/>(int64_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p3)<sp/>&gt;&gt;<sp/>8)<sp/>+<sp/>((var1<sp/>*<sp/>(int64_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p2)<sp/>&lt;&lt;<sp/>12);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>var1<sp/>=<sp/>((((int64_t)1<sp/>&lt;&lt;<sp/>47)<sp/>+<sp/>var1))<sp/>*<sp/>((int64_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p1)<sp/>&gt;&gt;<sp/>33;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var1<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;<sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>exception<sp/>caused<sp/>by<sp/>division<sp/>by<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1048576<sp/>-<sp/>pressure_raw;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(((p<sp/>&lt;&lt;<sp/>31)<sp/>-<sp/>var2)<sp/>*<sp/>3125)<sp/>/<sp/>var1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>var1<sp/>=<sp/>(((int64_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p9)<sp/>*<sp/>(p<sp/>&gt;&gt;<sp/>13)<sp/>*<sp/>(p<sp/>&gt;&gt;<sp/>13))<sp/>&gt;&gt;<sp/>25;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>var2<sp/>=<sp/>(((int64_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p8)<sp/>*<sp/>p)<sp/>&gt;&gt;<sp/>19;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>((p<sp/>+<sp/>var1<sp/>+<sp/>var2)<sp/>&gt;&gt;<sp/>8)<sp/>+<sp/>(((int64_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p7)<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)p<sp/>/<sp/>25600.0f;<sp/></highlight><highlight class="comment">//<sp/>in<sp/>hPa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="class_b_m_e280_1a54d06d8e21f2d14cd136fdbc9121cb32" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_b_m_e280_1a54d06d8e21f2d14cd136fdbc9121cb32" kindref="member">BME280::convert_humidity</ref>(int32_t<sp/>humidity_raw)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>v_x1_u32r;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>v_x1_u32r<sp/>=<sp/><ref refid="class_b_m_e280_1ad20f44914b78395f4d4bc64f4a68b369" kindref="member">t_fine</ref><sp/>-<sp/>76800;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>v_x1_u32r<sp/>=<sp/>(((((humidity_raw<sp/>&lt;&lt;<sp/>14)<sp/>-<sp/>((int32_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_h4<sp/>&lt;&lt;<sp/>20)<sp/>-<sp/>((int32_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_h5<sp/>*<sp/>v_x1_u32r))<sp/>+<sp/>16384)<sp/>&gt;&gt;<sp/>15)<sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((((((v_x1_u32r<sp/>*<sp/>(int32_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_h6)<sp/>&gt;&gt;<sp/>10)<sp/>*<sp/>(((v_x1_u32r<sp/>*<sp/>(int32_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_h3)<sp/>&gt;&gt;<sp/>11)<sp/>+<sp/>32768))<sp/>&gt;&gt;<sp/>10)<sp/>+<sp/>2097152)<sp/>*</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int32_t)<ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_h2<sp/>+<sp/>8192)<sp/>&gt;&gt;<sp/>14));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>v_x1_u32r<sp/>=<sp/>std::max(v_x1_u32r,<sp/>(int32_t)0);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>v_x1_u32r<sp/>=<sp/>std::min(v_x1_u32r,<sp/>(int32_t)419430400);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>v_x1_u32r<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h<sp/>/<sp/>1024.0f;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="class_b_m_e280_1a9bdaf8aa0c2a67ab6fd0b611c69753e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_b_m_e280_1a9bdaf8aa0c2a67ab6fd0b611c69753e6" kindref="member">BME280::get_calibration_parameters</ref>()<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>temperature<sp/>and<sp/>pressure<sp/>calibration<sp/>data<sp/>(0x88<sp/>to<sp/>0xA1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>calib_data[26];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reg<sp/>=<sp/><ref refid="class_b_m_e280_1aef2d471c9d214ac18674f634708bf74a" kindref="member">REG_DIG_T1_LSB</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>i2c_write_blocking(<ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>,<sp/><ref refid="class_b_m_e280_1ae8a52ae32e8cefd398dedf8913737626" kindref="member">device_addr</ref>,<sp/>&amp;reg,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>to<sp/>BME280.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>i2c_read_blocking(<ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>,<sp/><ref refid="class_b_m_e280_1ae8a52ae32e8cefd398dedf8913737626" kindref="member">device_addr</ref>,<sp/>calib_data,<sp/>26,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>26)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>calibration<sp/>data<sp/>from<sp/>BME280.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>temperature<sp/>calibration<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_t1<sp/>=<sp/>(uint16_t)(calib_data[1]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>calib_data[0]);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_t2<sp/>=<sp/>(int16_t)(calib_data[3]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>calib_data[2]);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_t3<sp/>=<sp/>(int16_t)(calib_data[5]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>calib_data[4]);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>pressure<sp/>calibration<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p1<sp/>=<sp/>(uint16_t)(calib_data[7]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>calib_data[6]);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p2<sp/>=<sp/>(int16_t)(calib_data[9]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>calib_data[8]);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p3<sp/>=<sp/>(int16_t)(calib_data[11]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>calib_data[10]);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p4<sp/>=<sp/>(int16_t)(calib_data[13]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>calib_data[12]);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p5<sp/>=<sp/>(int16_t)(calib_data[15]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>calib_data[14]);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p6<sp/>=<sp/>(int16_t)(calib_data[17]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>calib_data[16]);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p7<sp/>=<sp/>(int16_t)(calib_data[19]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>calib_data[18]);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p8<sp/>=<sp/>(int16_t)(calib_data[21]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>calib_data[20]);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_p9<sp/>=<sp/>(int16_t)(calib_data[23]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>calib_data[22]);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_h1<sp/>=<sp/>calib_data[25];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>humidity<sp/>calibration<sp/>data<sp/>(0xE1<sp/>to<sp/>0xE7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>reg<sp/>=<sp/>0xE1;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>i2c_write_blocking(<ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>,<sp/><ref refid="class_b_m_e280_1ae8a52ae32e8cefd398dedf8913737626" kindref="member">device_addr</ref>,<sp/>&amp;reg,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>to<sp/>BME280<sp/>for<sp/>humidity<sp/>calibration.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>hum_calib_data[7];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>i2c_read_blocking(<ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>,<sp/><ref refid="class_b_m_e280_1ae8a52ae32e8cefd398dedf8913737626" kindref="member">device_addr</ref>,<sp/>hum_calib_data,<sp/>7,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>humidity<sp/>calibration<sp/>data<sp/>from<sp/>BME280.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>humidity<sp/>calibration<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_h2<sp/>=<sp/>(int16_t)(hum_calib_data[1]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>hum_calib_data[0]);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_h3<sp/>=<sp/>hum_calib_data[2];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_h4<sp/>=<sp/>(int16_t)((hum_calib_data[3]<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>(hum_calib_data[4]<sp/>&amp;<sp/>0x0F));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_h5<sp/>=<sp/>(int16_t)((hum_calib_data[5]<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>(hum_calib_data[4]<sp/>&gt;&gt;<sp/>4));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_b_m_e280_1ab61c36455871833809cff71b5fd3397f" kindref="member">calib_params</ref>.dig_h6<sp/>=<sp/>(int8_t)hum_calib_data[6];</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="class_b_m_e280_1aba168dd8fb74f3b101922c50e60542cb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_b_m_e280_1aba168dd8fb74f3b101922c50e60542cb" kindref="member">BME280::configure_sensor</ref>()<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>buf[2];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>humidity<sp/>oversampling<sp/>(must<sp/>be<sp/>set<sp/>before<sp/>ctrl_meas)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/><ref refid="class_b_m_e280_1a79967643d3432d070edb2af1d0082a1f" kindref="member">REG_CTRL_HUM</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>0x05;<sp/></highlight><highlight class="comment">//<sp/>Humidity<sp/>oversampling<sp/>x16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>i2c_write_blocking(<ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>,<sp/><ref refid="class_b_m_e280_1ae8a52ae32e8cefd398dedf8913737626" kindref="member">device_addr</ref>,<sp/>buf,<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>CTRL_HUM<sp/>to<sp/>BME280.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>config<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/><ref refid="class_b_m_e280_1a2b3d50ae8af2aea11c8ed21f1bec4ac8" kindref="member">REG_CONFIG</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>0x00;<sp/></highlight><highlight class="comment">//<sp/>Default<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>i2c_write_blocking(<ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>,<sp/><ref refid="class_b_m_e280_1ae8a52ae32e8cefd398dedf8913737626" kindref="member">device_addr</ref>,<sp/>buf,<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>CONFIG<sp/>to<sp/>BME280.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>ctrl_meas<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/><ref refid="class_b_m_e280_1ab635154b47baca711a2b03fa7d469092" kindref="member">REG_CTRL_MEAS</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>0xB7;<sp/></highlight><highlight class="comment">//<sp/>Temp<sp/>and<sp/>pressure<sp/>oversampling<sp/>x16,<sp/>normal<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>i2c_write_blocking(<ref refid="class_b_m_e280_1ac402b86b5376fcfebefad1c8cec948b2" kindref="member">i2c_port</ref>,<sp/><ref refid="class_b_m_e280_1ae8a52ae32e8cefd398dedf8913737626" kindref="member">device_addr</ref>,<sp/>buf,<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=2)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>CTRL_MEAS<sp/>to<sp/>BME280.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lib/BME280/BME280.cpp"/>
  </compounddef>
</doxygen>
