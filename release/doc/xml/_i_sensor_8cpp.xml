<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_i_sensor_8cpp" kind="file" language="C++">
    <compoundname>ISensor.cpp</compoundname>
    <includes refid="_i_sensor_8h" local="yes">ISensor.h</includes>
    <includes refid="_b_h1750___w_r_a_p_p_e_r_8h" local="yes">lib/BH1750/BH1750_WRAPPER.h</includes>
    <includes refid="_b_m_e280___w_r_a_p_p_e_r_8h" local="yes">lib/BME280/BME280_WRAPPER.h</includes>
    <includes refid="_h_m_c5883_l___w_r_a_p_p_e_r_8h" local="yes">lib/HMC5883L/HMC5883L_WRAPPER.h</includes>
    <incdepgraph>
      <node id="8">
        <label>BH1750.h</label>
        <link refid="_b_h1750_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>lib/BH1750/BH1750_WRAPPER.h</label>
        <link refid="_b_h1750___w_r_a_p_p_e_r_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>BME280.h</label>
        <link refid="_b_m_e280_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>lib/BME280/BME280_WRAPPER.h</label>
        <link refid="_b_m_e280___w_r_a_p_p_e_r_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>HMC5883L.h</label>
        <link refid="_h_m_c5883_l_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>lib/HMC5883L/HMC5883L_WRAPPER.h</label>
        <link refid="_h_m_c5883_l___w_r_a_p_p_e_r_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/ISensor.cpp</label>
        <link refid="_i_sensor_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ISensor.h</label>
        <link refid="_i_sensor_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="4">
        <label>hardware/i2c.h</label>
      </node>
      <node id="11">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>map</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>ISensor.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_i_sensor_8h" kindref="compound">ISensor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_b_h1750___w_r_a_p_p_e_r_8h" kindref="compound">lib/BH1750/BH1750_WRAPPER.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_b_m_e280___w_r_a_p_p_e_r_8h" kindref="compound">lib/BME280/BME280_WRAPPER.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_h_m_c5883_l___w_r_a_p_p_e_r_8h" kindref="compound">lib/HMC5883L/HMC5883L_WRAPPER.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="class_sensor_wrapper_1adac086bdfb57168899df56fc431c5f41" refkind="member"><highlight class="normal"><ref refid="class_sensor_wrapper_1a1702516a09884caf599fad7761dd04c1" kindref="member">SensorWrapper</ref>&amp;<sp/><ref refid="class_sensor_wrapper_1adac086bdfb57168899df56fc431c5f41" kindref="member">SensorWrapper::getInstance</ref>()<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_sensor_wrapper_1a1702516a09884caf599fad7761dd04c1" kindref="member">SensorWrapper</ref><sp/>instance;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><ref refid="class_sensor_wrapper_1a1702516a09884caf599fad7761dd04c1" kindref="member">SensorWrapper::SensorWrapper</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="class_sensor_wrapper_1acbec9bb41e3edd34146eacbf23a807a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sensor_wrapper_1acbec9bb41e3edd34146eacbf23a807a1" kindref="member">SensorWrapper::initSensor</ref>(<ref refid="_i_sensor_8h_1a213c434cb928c4ca22513e2302632435" kindref="member">SensorType</ref><sp/>type,<sp/>i2c_inst_t*<sp/>i2c)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(type)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_i_sensor_8h_1a213c434cb928c4ca22513e2302632435af8589806bbf66241917092b2a6e18c6f" kindref="member">SensorType::LIGHT</ref>:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sensor_wrapper_1ae06e367395181a74d676c533393b47be" kindref="member">sensors</ref>[type]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_b_h1750_wrapper" kindref="compound">BH1750Wrapper</ref>();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_i_sensor_8h_1a213c434cb928c4ca22513e2302632435a889a65415d92b72cffa7df3f8ecf13f9" kindref="member">SensorType::ENVIRONMENT</ref>:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sensor_wrapper_1ae06e367395181a74d676c533393b47be" kindref="member">sensors</ref>[type]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_b_m_e280_wrapper" kindref="compound">BME280Wrapper</ref>(i2c);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_i_sensor_8h_1a213c434cb928c4ca22513e2302632435aadce094d314507ad8b234a286aeff254" kindref="member">SensorType::IMU</ref>:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sensors[type]<sp/>=<sp/>new<sp/>MPU6050Wrapper(i2c);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_i_sensor_8h_1a213c434cb928c4ca22513e2302632435acf29c1440f69cc71f0169036831ef688" kindref="member">SensorType::MAGNETOMETER</ref>:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sensor_wrapper_1ae06e367395181a74d676c533393b47be" kindref="member">sensors</ref>[type]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_h_m_c5883_l_wrapper" kindref="compound">HMC5883LWrapper</ref>(i2c);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sensor_wrapper_1ae06e367395181a74d676c533393b47be" kindref="member">sensors</ref>[type]-&gt;init();</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="class_sensor_wrapper_1aeaa7bbc1f7d31212348fd617392cc8d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sensor_wrapper_1aeaa7bbc1f7d31212348fd617392cc8d4" kindref="member">SensorWrapper::configureSensor</ref>(<ref refid="_i_sensor_8h_1a213c434cb928c4ca22513e2302632435" kindref="member">SensorType</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::string&gt;&amp;<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="class_sensor_wrapper_1ae06e367395181a74d676c533393b47be" kindref="member">sensors</ref>.find(type);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="class_sensor_wrapper_1ae06e367395181a74d676c533393b47be" kindref="member">sensors</ref>.end()<sp/>&amp;&amp;<sp/>it-&gt;second-&gt;isInitialized())<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second-&gt;configure(config);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Sensor<sp/>not<sp/>initialized<sp/>or<sp/>not<sp/>found:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="class_sensor_wrapper_1a1b30eac9a56098470f130754134057b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_sensor_wrapper_1a1b30eac9a56098470f130754134057b9" kindref="member">SensorWrapper::readSensorData</ref>(<ref refid="_i_sensor_8h_1a213c434cb928c4ca22513e2302632435" kindref="member">SensorType</ref><sp/>sensorType,<sp/><ref refid="_i_sensor_8h_1a21b0301bb3eb76855366980212c8ae5e" kindref="member">SensorDataTypeIdentifier</ref><sp/>dataType)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="class_sensor_wrapper_1ae06e367395181a74d676c533393b47be" kindref="member">sensors</ref>.find(sensorType);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="class_sensor_wrapper_1ae06e367395181a74d676c533393b47be" kindref="member">sensors</ref>.end()<sp/>&amp;&amp;<sp/>it-&gt;second-&gt;isInitialized())<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second-&gt;readData(dataType);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lib/ISensor.cpp"/>
  </compounddef>
</doxygen>
