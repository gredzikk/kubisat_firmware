<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="commands_8h" kind="file" language="C++">
    <compoundname>commands.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">functional</includes>
    <includes local="no">map</includes>
    <includes refid="protocol_8h" local="yes">protocol.h</includes>
    <includedby refid="commands_8cpp" local="yes">commands/commands.cpp</includedby>
    <includedby refid="diagnostic__commands_8cpp" local="yes">commands/diagnostic_commands.cpp</includedby>
    <incdepgraph>
      <node id="23">
        <label>build_number.h</label>
        <link refid="build__number_8h"/>
      </node>
      <node id="1">
        <label>commands/commands.h</label>
        <link refid="commands_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>protocol.h</label>
        <link refid="protocol_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>INA3221.h</label>
        <link refid="_i_n_a3221_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>LoRa-RP2040.h</label>
        <link refid="_lo_ra-_r_p2040_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Print.h</label>
        <link refid="_print_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>PowerManager.h</label>
        <link refid="_power_manager_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>pin_config.h</label>
        <link refid="pin__config_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cstdint</label>
      </node>
      <node id="16">
        <label>cstdio</label>
      </node>
      <node id="17">
        <label>cstdlib</label>
      </node>
      <node id="18">
        <label>cstring</label>
      </node>
      <node id="3">
        <label>functional</label>
      </node>
      <node id="26">
        <label>hardware/gpio.h</label>
      </node>
      <node id="14">
        <label>hardware/i2c.h</label>
      </node>
      <node id="27">
        <label>hardware/spi.h</label>
      </node>
      <node id="21">
        <label>hardware/uart.h</label>
      </node>
      <node id="30">
        <label>inttypes.h</label>
      </node>
      <node id="8">
        <label>iomanip</label>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="25">
        <label>pico/binary_info.h</label>
      </node>
      <node id="15">
        <label>pico/stdlib.h</label>
      </node>
      <node id="10">
        <label>stdint.h</label>
      </node>
      <node id="20">
        <label>stdio.h</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="28">
        <label>string.h</label>
      </node>
      <node id="22">
        <label>time.h</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>commands/commands.cpp</label>
        <link refid="commands_8cpp"/>
      </node>
      <node id="1">
        <label>commands/commands.h</label>
        <link refid="commands_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>commands/diagnostic_commands.cpp</label>
        <link refid="diagnostic__commands_8cpp"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="commands_8h_1acbfd6523ceea62dad855ea65b52eb5b1" prot="public" static="no" extern="yes" mutable="no">
        <type>std::map&lt; uint32_t, std::function&lt; <ref refid="struct_frame" kindref="compound">Frame</ref>(const std::string &amp;, <ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref>)&gt; &gt;</type>
        <definition>std::map&lt;uint32_t, std::function&lt;Frame(const std::string&amp;, OperationType)&gt; &gt; commandHandlers</definition>
        <argsstring></argsstring>
        <name>commandHandlers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="commands/commands.h" line="46" column="17" bodyfile="commands/commands.cpp" bodystart="9" bodyend="34" declfile="commands/commands.h" declline="46" declcolumn="17"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="commands_8h_1a1eefb8c4d539d50c787b4db3f6ebb093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_frame" kindref="compound">Frame</ref></type>
        <definition>Frame handleTime</definition>
        <argsstring>(const std::string &amp;param, OperationType operationType)</argsstring>
        <name>handleTime</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref></type>
          <declname>operationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="commands/commands.h" line="11" column="7" bodyfile="commands/clock_commands.cpp" bodystart="8" bodyend="57" declfile="commands/commands.h" declline="11" declcolumn="7"/>
        <references refid="communication_8h_1a54afeb73435419551a1b51a3fd5c3266" compoundref="frame_8cpp" startline="113" endline="146">buildFrame</references>
        <references refid="event__manager_8h_1a163ce349de3451c81f50080e5fbe62a2ae6b94e58bfd13b21bc786578d9f8ba4a" compoundref="event__manager_8h" startline="64">CHANGED</references>
        <references refid="event__manager_8h_1a87aefa0e7b725125ea1a741c80858aa7aca6c44800b2dc123e0d4389a867e8686" compoundref="event__manager_8h" startline="17">CLOCK</references>
        <references refid="class_event_emitter_1a539d733505f9a793439a9cfc4f2af079" compoundref="event__manager_8h" startline="142" endline="147">EventEmitter::emit</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5" compoundref="protocol_8h" startline="28">ERROR</references>
        <references refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8" compoundref="protocol_8h" startline="33">GET</references>
        <references refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a8c52684db8f49511e9b44471716bf164" compoundref="protocol_8h" startline="34">SET</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c" compoundref="protocol_8h" startline="27">SUCCESS</references>
        <references refid="clock__commands_8cpp_1abfd573c8a839ac00ea3b96d691ea11c3">systemClock</references>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1acc9239d946ee18d2ff19af2c6a2177f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_frame" kindref="compound">Frame</ref></type>
        <definition>Frame handleGetTimezoneOffset</definition>
        <argsstring>(const std::string &amp;param, OperationType operationType)</argsstring>
        <name>handleGetTimezoneOffset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref></type>
          <declname>operationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="commands/commands.h" line="12" column="7" bodyfile="commands/clock_commands.cpp" bodystart="59" bodyend="65" declfile="commands/commands.h" declline="12" declcolumn="7"/>
        <references refid="communication_8h_1a54afeb73435419551a1b51a3fd5c3266" compoundref="frame_8cpp" startline="113" endline="146">buildFrame</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5" compoundref="protocol_8h" startline="28">ERROR</references>
        <references refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8" compoundref="protocol_8h" startline="33">GET</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c" compoundref="protocol_8h" startline="27">SUCCESS</references>
        <references refid="clock__commands_8cpp_1abfd573c8a839ac00ea3b96d691ea11c3">systemClock</references>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a9e802e312d0779aab74966074e81eb30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_frame" kindref="compound">Frame</ref></type>
        <definition>Frame handleSetTimezoneOffset</definition>
        <argsstring>(const std::string &amp;param, OperationType operationType)</argsstring>
        <name>handleSetTimezoneOffset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref></type>
          <declname>operationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="commands/commands.h" line="13" column="7" bodyfile="commands/clock_commands.cpp" bodystart="67" bodyend="81" declfile="commands/commands.h" declline="13" declcolumn="7"/>
        <references refid="communication_8h_1a54afeb73435419551a1b51a3fd5c3266" compoundref="frame_8cpp" startline="113" endline="146">buildFrame</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5" compoundref="protocol_8h" startline="28">ERROR</references>
        <references refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a8c52684db8f49511e9b44471716bf164" compoundref="protocol_8h" startline="34">SET</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c" compoundref="protocol_8h" startline="27">SUCCESS</references>
        <references refid="clock__commands_8cpp_1abfd573c8a839ac00ea3b96d691ea11c3">systemClock</references>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1add8778da60c0dc5c0add2c7b2ccdc57e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_frame" kindref="compound">Frame</ref></type>
        <definition>Frame handleGetClockSyncInterval</definition>
        <argsstring>(const std::string &amp;param, OperationType operationType)</argsstring>
        <name>handleGetClockSyncInterval</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref></type>
          <declname>operationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="commands/commands.h" line="14" column="7" bodyfile="commands/clock_commands.cpp" bodystart="83" bodyend="89" declfile="commands/commands.h" declline="14" declcolumn="7"/>
        <references refid="communication_8h_1a54afeb73435419551a1b51a3fd5c3266" compoundref="frame_8cpp" startline="113" endline="146">buildFrame</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5" compoundref="protocol_8h" startline="28">ERROR</references>
        <references refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8" compoundref="protocol_8h" startline="33">GET</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c" compoundref="protocol_8h" startline="27">SUCCESS</references>
        <references refid="clock__commands_8cpp_1abfd573c8a839ac00ea3b96d691ea11c3">systemClock</references>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a00137f0d4c6a83ee5c0df49c7370fe65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_frame" kindref="compound">Frame</ref></type>
        <definition>Frame handleSetClockSyncInterval</definition>
        <argsstring>(const std::string &amp;param, OperationType operationType)</argsstring>
        <name>handleSetClockSyncInterval</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref></type>
          <declname>operationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="commands/commands.h" line="15" column="7" bodyfile="commands/clock_commands.cpp" bodystart="91" bodyend="102" declfile="commands/commands.h" declline="15" declcolumn="7"/>
        <references refid="communication_8h_1a54afeb73435419551a1b51a3fd5c3266" compoundref="frame_8cpp" startline="113" endline="146">buildFrame</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5" compoundref="protocol_8h" startline="28">ERROR</references>
        <references refid="communication_8cpp_1aaaceac04637cd33a7f3fffdd1711e6c5" compoundref="communication_8cpp" startline="8">interval</references>
        <references refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a8c52684db8f49511e9b44471716bf164" compoundref="protocol_8h" startline="34">SET</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c" compoundref="protocol_8h" startline="27">SUCCESS</references>
        <references refid="clock__commands_8cpp_1abfd573c8a839ac00ea3b96d691ea11c3">systemClock</references>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a6def0bf9e591d66bd98b752f731d44ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_frame" kindref="compound">Frame</ref></type>
        <definition>Frame handleGetClockDrift</definition>
        <argsstring>(const std::string &amp;param, OperationType operationType)</argsstring>
        <name>handleGetClockDrift</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref></type>
          <declname>operationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="commands/commands.h" line="16" column="7" bodyfile="commands/clock_commands.cpp" bodystart="104" bodyend="110" declfile="commands/commands.h" declline="16" declcolumn="7"/>
        <references refid="communication_8h_1a54afeb73435419551a1b51a3fd5c3266" compoundref="frame_8cpp" startline="113" endline="146">buildFrame</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5" compoundref="protocol_8h" startline="28">ERROR</references>
        <references refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8" compoundref="protocol_8h" startline="33">GET</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c" compoundref="protocol_8h" startline="27">SUCCESS</references>
        <references refid="clock__commands_8cpp_1abfd573c8a839ac00ea3b96d691ea11c3">systemClock</references>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1ae4cd7f745d6f9e2cadef70e21d8a9fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_frame" kindref="compound">Frame</ref></type>
        <definition>Frame handleSetClockDrift</definition>
        <argsstring>(const std::string &amp;param, OperationType operationType)</argsstring>
        <name>handleSetClockDrift</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref></type>
          <declname>operationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="commands/commands.h" line="17" column="7" bodyfile="commands/clock_commands.cpp" bodystart="112" bodyend="123" declfile="commands/commands.h" declline="17" declcolumn="7"/>
        <references refid="communication_8h_1a54afeb73435419551a1b51a3fd5c3266" compoundref="frame_8cpp" startline="113" endline="146">buildFrame</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5" compoundref="protocol_8h" startline="28">ERROR</references>
        <references refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a8c52684db8f49511e9b44471716bf164" compoundref="protocol_8h" startline="34">SET</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c" compoundref="protocol_8h" startline="27">SUCCESS</references>
        <references refid="clock__commands_8cpp_1abfd573c8a839ac00ea3b96d691ea11c3">systemClock</references>
      </memberdef>
      <memberdef kind="function" id="commands_8h_1a17274560343c34119630b27d88ef475e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_frame" kindref="compound">Frame</ref></type>
        <definition>Frame handleGetLastSyncTime</definition>
        <argsstring>(const std::string &amp;param, OperationType operationType)</argsstring>
        <name>handleGetLastSyncTime</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref></type>
          <declname>operationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="commands/commands.h" line="18" column="7" bodyfile="commands/clock_commands.cpp" bodystart="125" bodyend="131" declfile="commands/commands.h" declline="18" declcolumn="7"/>
        <references refid="communication_8h_1a54afeb73435419551a1b51a3fd5c3266" compoundref="frame_8cpp" startline="113" endline="146">buildFrame</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1abb1ca97ec761fc37101737ba0aa2e7c5" compoundref="protocol_8h" startline="28">ERROR</references>
        <references refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047a7528035a93ee69cedb1dbddb2f0bfcc8" compoundref="protocol_8h" startline="33">GET</references>
        <references refid="protocol_8h_1ad13fb53c92ad2af53a95ee45749796d1ad0749aaba8b833466dfcbb0428e4f89c" compoundref="protocol_8h" startline="27">SUCCESS</references>
        <references refid="clock__commands_8cpp_1abfd573c8a839ac00ea3b96d691ea11c3">systemClock</references>
      </memberdef>
      <member refid="group___diagnostic_commands_1gade74b82cf2c20d93c5e0ce624cd7ca77" kind="function"><name>handleListCommands</name></member>
      <member refid="group___diagnostic_commands_1ga5ebac5711334cb3584974b2b74556543" kind="function"><name>handleGetBuildVersion</name></member>
      <memberdef kind="function" id="commands_8h_1a7a7ebcb893bb8e5bb8b66c1d8db539b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_frame" kindref="compound">Frame</ref></type>
        <definition>Frame handleGetCommandsTimestamp</definition>
        <argsstring>(const std::string &amp;param, OperationType operationType)</argsstring>
        <name>handleGetCommandsTimestamp</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref></type>
          <declname>operationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="commands/commands.h" line="23" column="7" declfile="commands/commands.h" declline="23" declcolumn="7"/>
        <references refid="commands_8cpp_1a04a0515603ba347ef314678876f3fa26" compoundref="commands_8cpp" startline="9" endline="34">commandHandlers</references>
      </memberdef>
      <member refid="group___diagnostic_commands_1ga3a6c6092cd01fd9c13ab429f4a34326d" kind="function"><name>handleEnterBootloaderMode</name></member>
      <member refid="group___g_p_s_commands_1gaa4c13d7d324ffb354badf45e9ceffb1c" kind="function"><name>handleGPSPowerStatus</name></member>
      <member refid="group___g_p_s_commands_1gad12f2e18bdfecbd5b6e8d8a84bb9cd77" kind="function"><name>handleEnableGPSTransparentMode</name></member>
      <member refid="group___g_p_s_commands_1ga71881bd1a0a285e4149db732a3f1b533" kind="function"><name>handleGetRMCData</name></member>
      <member refid="group___g_p_s_commands_1gaf1f6c0fb4266518353e088e8781ed143" kind="function"><name>handleGetGGAData</name></member>
      <member refid="group___power_commands_1gafef922e13071e5fb67da78207a9f22a4" kind="function"><name>handleGetPowerManagerIDs</name></member>
      <member refid="group___power_commands_1gad301b8c13cafa148a6f3e80e9b0bcf1a" kind="function"><name>handleGetVoltageBattery</name></member>
      <member refid="group___power_commands_1ga9f2b608f46080fcdae38a1a8454938b8" kind="function"><name>handleGetVoltage5V</name></member>
      <member refid="group___power_commands_1ga3f38c538065bf67dbec1142fdb866d16" kind="function"><name>handleGetCurrentChargeUSB</name></member>
      <member refid="group___power_commands_1ga6fbaf484e68c9561ad7fabef21def37b" kind="function"><name>handleGetCurrentChargeSolar</name></member>
      <member refid="group___power_commands_1ga83596ea837df6cf7b15e673b95bf524f" kind="function"><name>handleGetCurrentChargeTotal</name></member>
      <member refid="group___power_commands_1gabd6610f557fe9deaa9f80d9405738226" kind="function"><name>handleGetCurrentDraw</name></member>
      <member refid="group___event_commands_1gad921fe7254d7ec43f16a6fb21f5c385a" kind="function"><name>handleGetLastEvents</name></member>
      <member refid="group___event_commands_1ga6f817db327c7b16cf49575635e595004" kind="function"><name>handleGetEventCount</name></member>
      <memberdef kind="function" id="commands_8h_1a1907d400d2c8d8d054ba95bcf43276ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_frame" kindref="compound">Frame</ref></type>
        <definition>Frame executeCommand</definition>
        <argsstring>(uint32_t commandKey, const std::string &amp;param, OperationType operationType)</argsstring>
        <name>executeCommand</name>
        <param>
          <type>uint32_t</type>
          <declname>commandKey</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref></type>
          <declname>operationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="commands/commands.h" line="45" column="7" bodyfile="commands/commands.cpp" bodystart="37" bodyend="45" declfile="commands/commands.h" declline="45" declcolumn="7"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>commands/commands.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>COMMANDS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COMMANDS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="protocol_8h" kindref="compound">protocol.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="commands_8h_1a1eefb8c4d539d50c787b4db3f6ebb093" kindref="member">handleTime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="commands_8h_1acc9239d946ee18d2ff19af2c6a2177f0" kindref="member">handleGetTimezoneOffset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="commands_8h_1a9e802e312d0779aab74966074e81eb30" kindref="member">handleSetTimezoneOffset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="commands_8h_1add8778da60c0dc5c0add2c7b2ccdc57e" kindref="member">handleGetClockSyncInterval</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="commands_8h_1a00137f0d4c6a83ee5c0df49c7370fe65" kindref="member">handleSetClockSyncInterval</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="commands_8h_1a6def0bf9e591d66bd98b752f731d44ba" kindref="member">handleGetClockDrift</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="commands_8h_1ae4cd7f745d6f9e2cadef70e21d8a9fcb" kindref="member">handleSetClockDrift</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="commands_8h_1a17274560343c34119630b27d88ef475e" kindref="member">handleGetLastSyncTime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DIAG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___diagnostic_commands_1gade74b82cf2c20d93c5e0ce624cd7ca77" kindref="member">handleListCommands</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___diagnostic_commands_1ga5ebac5711334cb3584974b2b74556543" kindref="member">handleGetBuildVersion</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="23" refid="commands_8h_1a7a7ebcb893bb8e5bb8b66c1d8db539b1" refkind="member"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="commands_8h_1a7a7ebcb893bb8e5bb8b66c1d8db539b1" kindref="member">handleGetCommandsTimestamp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___diagnostic_commands_1ga3a6c6092cd01fd9c13ab429f4a34326d" kindref="member">handleEnterBootloaderMode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GPS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___g_p_s_commands_1gaa4c13d7d324ffb354badf45e9ceffb1c" kindref="member">handleGPSPowerStatus</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___g_p_s_commands_1gad12f2e18bdfecbd5b6e8d8a84bb9cd77" kindref="member">handleEnableGPSTransparentMode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___g_p_s_commands_1ga71881bd1a0a285e4149db732a3f1b533" kindref="member">handleGetRMCData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___g_p_s_commands_1gaf1f6c0fb4266518353e088e8781ed143" kindref="member">handleGetGGAData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>POWER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___power_commands_1gafef922e13071e5fb67da78207a9f22a4" kindref="member">handleGetPowerManagerIDs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___power_commands_1gad301b8c13cafa148a6f3e80e9b0bcf1a" kindref="member">handleGetVoltageBattery</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___power_commands_1ga9f2b608f46080fcdae38a1a8454938b8" kindref="member">handleGetVoltage5V</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___power_commands_1ga3f38c538065bf67dbec1142fdb866d16" kindref="member">handleGetCurrentChargeUSB</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___power_commands_1ga6fbaf484e68c9561ad7fabef21def37b" kindref="member">handleGetCurrentChargeSolar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___power_commands_1ga83596ea837df6cf7b15e673b95bf524f" kindref="member">handleGetCurrentChargeTotal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___power_commands_1gabd6610f557fe9deaa9f80d9405738226" kindref="member">handleGetCurrentDraw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EVENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___event_commands_1gad921fe7254d7ec43f16a6fb21f5c385a" kindref="member">handleGetLastEvents</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="group___event_commands_1ga6f817db327c7b16cf49575635e595004" kindref="member">handleGetEventCount</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="struct_frame" kindref="compound">Frame</ref><sp/><ref refid="commands_8h_1a1907d400d2c8d8d054ba95bcf43276ea" kindref="member">executeCommand</ref>(uint32_t<sp/>commandKey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>param,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::map&lt;uint32_t,<sp/>std::function&lt;<ref refid="struct_frame" kindref="compound">Frame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/><ref refid="protocol_8h_1a9a2c9c31d675b34f6ec35cc1ca89e047" kindref="member">OperationType</ref>)&gt;&gt;<sp/><ref refid="commands_8cpp_1a04a0515603ba347ef314678876f3fa26" kindref="member">commandHandlers</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="commands/commands.h"/>
  </compounddef>
</doxygen>
