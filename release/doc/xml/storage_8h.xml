<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="storage_8h" kind="file" language="C++">
    <compoundname>storage.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">hardware/clocks.h</includes>
    <includes local="no">hardware/flash.h</includes>
    <includes local="yes">blockdevice/flash.h</includes>
    <includes local="yes">blockdevice/sd.h</includes>
    <includes local="yes">filesystem/littlefs.h</includes>
    <includes local="yes">filesystem/vfs.h</includes>
    <includes refid="pin__config_8h" local="yes">pin_config.h</includes>
    <includes local="yes">lfs.h</includes>
    <includedby refid="includes_8h" local="yes">includes.h</includedby>
    <includedby refid="storage_8cpp" local="yes">storage.cpp</includedby>
    <incdepgraph>
      <node id="10">
        <label>pin_config.h</label>
        <link refid="pin__config_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>storage.h</label>
        <link refid="storage_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>blockdevice/flash.h</label>
      </node>
      <node id="7">
        <label>blockdevice/sd.h</label>
      </node>
      <node id="8">
        <label>filesystem/littlefs.h</label>
      </node>
      <node id="9">
        <label>filesystem/vfs.h</label>
      </node>
      <node id="4">
        <label>hardware/clocks.h</label>
      </node>
      <node id="5">
        <label>hardware/flash.h</label>
      </node>
      <node id="12">
        <label>lfs.h</label>
      </node>
      <node id="11">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>includes.h</label>
        <link refid="includes_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="4">
        <label>storage.cpp</label>
        <link refid="storage_8cpp"/>
      </node>
      <node id="1">
        <label>storage.h</label>
        <link refid="storage_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_file_handle" prot="public">FileHandle</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="storage_8h_1afb19e37469a751aa61de3dcd0c70b4b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fs_init</definition>
        <argsstring>(void)</argsstring>
        <name>fs_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="storage.h" line="20" column="6" bodyfile="storage.cpp" bodystart="9" bodyend="35" declfile="storage.h" declline="20" declcolumn="6"/>
        <references refid="pin__config_8h_1a04d57a6c18b2d5e81f31093e58ed0c62" compoundref="pin__config_8h" startline="32">SD_CS_PIN</references>
        <references refid="pin__config_8h_1ad3aea67d9c7c7dc0be847a1467786abb" compoundref="pin__config_8h" startline="29">SD_MISO_PIN</references>
        <references refid="pin__config_8h_1a1150cf94392cb54e7e979e6b69f210fb" compoundref="pin__config_8h" startline="30">SD_MOSI_PIN</references>
        <references refid="pin__config_8h_1a712b6e5405cc83d1a7c1a30f198df12a" compoundref="pin__config_8h" startline="31">SD_SCK_PIN</references>
        <references refid="pin__config_8h_1ae8e100b2951ae1785ada736a7d960a77" compoundref="pin__config_8h" startline="28">SD_SPI_PORT</references>
        <referencedby refid="main_8cpp_1a21af2d50d7779336997d5f3456352431" compoundref="main_8cpp" startline="18" endline="54">initSystems</referencedby>
      </memberdef>
      <memberdef kind="function" id="storage_8h_1a921d0d7089c0c7731762035e7feeb27a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_file_handle" kindref="compound">FileHandle</ref></type>
        <definition>FileHandle fs_open_file</definition>
        <argsstring>(const char *filename, const char *mode)</argsstring>
        <name>fs_open_file</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="storage.h" line="21" column="12" bodyfile="storage.cpp" bodystart="37" bodyend="56" declfile="storage.h" declline="21" declcolumn="12"/>
        <references refid="struct_file_handle_1afc2bbe66c168d4d264f3af1ec037b122" compoundref="storage_8h" startline="16">FileHandle::fd</references>
        <references refid="struct_file_handle_1a1c2451d05e2d2937da92fe194e9281cf" compoundref="storage_8h" startline="17">FileHandle::is_open</references>
      </memberdef>
      <memberdef kind="function" id="storage_8h_1aab35cc4af25dd4a32624e51bf0fcda5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t fs_write_file</definition>
        <argsstring>(FileHandle &amp;handle, const void *buffer, size_t size)</argsstring>
        <name>fs_write_file</name>
        <param>
          <type><ref refid="struct_file_handle" kindref="compound">FileHandle</ref> &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="storage.h" line="22" column="9" bodyfile="storage.cpp" bodystart="58" bodyend="68" declfile="storage.h" declline="22" declcolumn="9"/>
        <references refid="main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62" compoundref="main_8cpp" startline="8">buffer</references>
        <references refid="struct_file_handle_1afc2bbe66c168d4d264f3af1ec037b122" compoundref="storage_8h" startline="16">FileHandle::fd</references>
        <references refid="struct_file_handle_1a1c2451d05e2d2937da92fe194e9281cf" compoundref="storage_8h" startline="17">FileHandle::is_open</references>
      </memberdef>
      <memberdef kind="function" id="storage_8h_1a259e40f946e1178329ed6cdf18c35b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t fs_read_file</definition>
        <argsstring>(FileHandle &amp;handle, void *buffer, size_t size)</argsstring>
        <name>fs_read_file</name>
        <param>
          <type><ref refid="struct_file_handle" kindref="compound">FileHandle</ref> &amp;</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="storage.h" line="23" column="9" bodyfile="storage.cpp" bodystart="70" bodyend="80" declfile="storage.h" declline="23" declcolumn="9"/>
        <references refid="main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62" compoundref="main_8cpp" startline="8">buffer</references>
        <references refid="struct_file_handle_1afc2bbe66c168d4d264f3af1ec037b122" compoundref="storage_8h" startline="16">FileHandle::fd</references>
        <references refid="struct_file_handle_1a1c2451d05e2d2937da92fe194e9281cf" compoundref="storage_8h" startline="17">FileHandle::is_open</references>
      </memberdef>
      <memberdef kind="function" id="storage_8h_1a1ed8daa820da91b458072334ecec9618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fs_close_file</definition>
        <argsstring>(FileHandle &amp;handle)</argsstring>
        <name>fs_close_file</name>
        <param>
          <type><ref refid="struct_file_handle" kindref="compound">FileHandle</ref> &amp;</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="storage.h" line="24" column="6" bodyfile="storage.cpp" bodystart="82" bodyend="96" declfile="storage.h" declline="24" declcolumn="6"/>
        <references refid="struct_file_handle_1afc2bbe66c168d4d264f3af1ec037b122" compoundref="storage_8h" startline="16">FileHandle::fd</references>
        <references refid="struct_file_handle_1a1c2451d05e2d2937da92fe194e9281cf" compoundref="storage_8h" startline="17">FileHandle::is_open</references>
      </memberdef>
      <memberdef kind="function" id="storage_8h_1a4d0e5bbd1f57f47164521ca84c8e6fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fs_file_exists</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>fs_file_exists</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="storage.h" line="25" column="6" bodyfile="storage.cpp" bodystart="99" bodyend="102" declfile="storage.h" declline="25" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>STORAGE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STORAGE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hardware/clocks.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hardware/flash.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;blockdevice/flash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;blockdevice/sd.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;filesystem/littlefs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;filesystem/vfs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pin__config_8h" kindref="compound">pin_config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lfs.h&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="struct_file_handle" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_file_handle" kindref="compound">FileHandle</ref><sp/>{</highlight></codeline>
<codeline lineno="16" refid="struct_file_handle_1afc2bbe66c168d4d264f3af1ec037b122" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_file_handle_1afc2bbe66c168d4d264f3af1ec037b122" kindref="member">fd</ref>;</highlight></codeline>
<codeline lineno="17" refid="struct_file_handle_1a1c2451d05e2d2937da92fe194e9281cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_file_handle_1a1c2451d05e2d2937da92fe194e9281cf" kindref="member">is_open</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="storage_8h_1afb19e37469a751aa61de3dcd0c70b4b0" kindref="member">fs_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><ref refid="struct_file_handle" kindref="compound">FileHandle</ref><sp/><ref refid="storage_8h_1a921d0d7089c0c7731762035e7feeb27a" kindref="member">fs_open_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">ssize_t<sp/><ref refid="storage_8h_1aab35cc4af25dd4a32624e51bf0fcda5b" kindref="member">fs_write_file</ref>(<ref refid="struct_file_handle" kindref="compound">FileHandle</ref>&amp;<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62" kindref="member">buffer</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">ssize_t<sp/><ref refid="storage_8h_1a259e40f946e1178329ed6cdf18c35b0c" kindref="member">fs_read_file</ref>(<ref refid="struct_file_handle" kindref="compound">FileHandle</ref>&amp;<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="main_8cpp_1af00b615ca097c43dbb02ae3a00ea3a62" kindref="member">buffer</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="storage_8h_1a1ed8daa820da91b458072334ecec9618" kindref="member">fs_close_file</ref>(<ref refid="struct_file_handle" kindref="compound">FileHandle</ref>&amp;<sp/>handle);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="storage_8h_1a4d0e5bbd1f57f47164521ca84c8e6fd1" kindref="member">fs_file_exists</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>example_file_operations()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Open<sp/>a<sp/>file<sp/>for<sp/>writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>FileHandle<sp/>log_file<sp/>=<sp/>fs_open_file(&quot;/log.txt&quot;,<sp/>&quot;w&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(!log_file.is_open)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uartPrint(&quot;Failed<sp/>to<sp/>open<sp/>log<sp/>file&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Write<sp/>some<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>message<sp/>=<sp/>&quot;Hello,<sp/>World!\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ssize_t<sp/>written<sp/>=<sp/>fs_write_file(log_file,<sp/>message,<sp/>strlen(message));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(written<sp/>&lt;<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uartPrint(&quot;Failed<sp/>to<sp/>write<sp/>to<sp/>log<sp/>file&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Close<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>fs_close_file(log_file);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Open<sp/>file<sp/>for<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>log_file<sp/>=<sp/>fs_open_file(&quot;/log.txt&quot;,<sp/>&quot;r&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(!log_file.is_open)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uartPrint(&quot;Failed<sp/>to<sp/>open<sp/>log<sp/>file<sp/>for<sp/>reading&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Read<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>char<sp/>buffer[128];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ssize_t<sp/>bytes_read<sp/>=<sp/>fs_read_file(log_file,<sp/>buffer,<sp/>sizeof(buffer)<sp/>-<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(bytes_read<sp/>&gt;<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[bytes_read]<sp/>=<sp/>&apos;\0&apos;;<sp/><sp/>//<sp/>Null<sp/>terminate<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uartPrint(buffer);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Close<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>fs_close_file(log_file);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="storage.h"/>
  </compounddef>
</doxygen>
